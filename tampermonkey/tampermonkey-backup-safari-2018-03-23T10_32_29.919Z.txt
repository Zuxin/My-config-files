{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Maximize Video","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":["*www.w3school.com.cn*"],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-end","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1521542192651,"data":{}},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/4870-maximize-video/code/Maximize%20Video.user.js","uuid":"d0280a38-497c-421f-a105-4d4d69265fd9","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIAkJTWF4aW1pemUgVmlkZW8KLy8gQG5hbWU6emgtQ04gIAkJ6KeG6aKR572R6aG15YWo5bGPCi8vIEBuYW1lc3BhY2UgICAJCWh0dHA6Ly93d3cuaWN5Y2F0LmNvbQovLyBAZGVzY3JpcHRpb24gCQlNYXhpbWl6ZSBhbGwgdmlkZW8gcGxheWVycwovLyBAZGVzY3JpcHRpb246emgtQ04gCeiuqeaJgOacieinhumikee9kemhteWFqOWxjwovLyBAYXV0aG9yICAgICAgCQnlhrvnjKsKLy8gQGluY2x1ZGUgICAgIAkJKgovLyBAZXhjbHVkZSAgICAgICAgICAgICAqd3d3Lnczc2Nob29sLmNvbS5jbioKLy8gQHZlcnNpb24gICAgIAkJOS42LjYKLy8gQGdyYW50ICAgICAgIAkJdW5zYWZlV2luZG93Ci8vIEBydW4tYXQgICAgICAJCWRvY3VtZW50LWVuZAovLyA9PS9Vc2VyU2NyaXB0PT0KCihmdW5jdGlvbigpIHsKCiAgICAndXNlIHN0cmljdCc7CgogICAgdmFyIGZ1bGxTdGF0dXMgPSBmYWxzZSwKICAgICAgICBpc0lmcmFtZSA9IGZhbHNlLAogICAgICAgIGlzRnVsbElmcmFtZVBsYXllciA9IGZhbHNlLAogICAgICAgIGlzUmJ0biA9IHRydWUsCiAgICAgICAgcGFyZW50QXJyYXkgPSBuZXcgQXJyYXkoKSwKICAgICAgICBiYWNrU3R5bGUgPSBuZXcgT2JqZWN0KCksCiAgICAgICAgbW91c2UgPSB7CiAgICAgICAgICAgIGxlYXZlOiAnbGlzdGVuZXInLAogICAgICAgICAgICBvdmVyOiAnbGlzdGVuZXInCiAgICAgICAgfSwKICAgICAgICBicm93c2VyLCBidG5UZXh0LCBwbGF5ZXIsIGNvbnRyb2xCdG4sIGxlZnRCdG4sIHJpZ2h0QnRuOwoKICAgIC8vSHRtbDXop4TliJlbb3ZlcmxheXzku45vdmVybGF55YiwcGxheWVy6IqC54K55pWw5oiWcGxheWVy6IqC54K5XSzpgILnlKjkuo7oh6rpgILlupTlpKflsI9IVE1MNeaSreaUvuWZqAogICAgdmFyIGh0bWw1UnVsZXMgPSB7CiAgICAgICAgJ3ZpZG5vZGUubmV0JzogWycjbXlWaWRlbyB2aWRlb3wjbXlWaWRlbyddLAogICAgICAgICdrLXZpZC5uZXQnOiBbJyNteVZpZGVvIHZpZGVvfCNteVZpZGVvJ10sCiAgICAgICAgJ2VnYW1lLnFxLmNvbSc6IFsnI2dpZnRfZGFubWFrdV9jb250YWluZXIgZGl2fCN2aWRlby1jb250YWluZXInLCAnI29ial92Y3BsYXllcl8xIGVtYmVkfCN2aWRlby1jb250YWluZXInXSwKICAgICAgICAnd2VpYm8uY29tJzogWyd2aWRlb3wyJ10sCiAgICAgICAgJ3Bhbi5iYWlkdS5jb20nOiBbJyN2aWRlby1yb290fCN2aWRlby1wbGF5ZXInXSwKICAgICAgICAnd3d3Lm5pY292aWRlby5qcCc6IFsnI1VhZFBsYXllcnwyJ10sCiAgICAgICAgJ3RoZXZpZGVvLm1lJzogWycjdnBsYXllciB2aWRlb3wxJ10sCiAgICAgICAgJ2tpbWNhcnRvb24ubWUnOiBbJyNkaXZDb250ZW50VmlkZW8gdmlkZW98MSddLAogICAgICAgICd3d3cuZGFpbHltb3Rpb24uY29tJzogWycjcGxheWVyIHZpZGVvfDQnLCAnI3BsYXllciAuZG1wX1ZpZGVvVmlld3wyJ10sCiAgICAgICAgJ3YueW91a3UuY29tJzogWycjeWtQbGF5ZXIgLnlrLXRyaWdnZXItbGF5ZXJ8MycsICcjeWtQbGF5ZXIgLnNwdi1sb2dvfDQnXSwKICAgICAgICAnd3d3LmlxaXlpLmNvbSc6IFsnI2ZsYXNoYm94IHZpZGVvfDInXSwKICAgICAgICAnd3d3LnlvdXR1YmUuY29tJzogWycjcGxheWVyLWFwaSB2aWRlb3wzJywgJyNjNC1wbGF5ZXIgdmlkZW98MicsICcjcGxheWVyLWNvbnRhaW5lciB2aWRlb3wzJywgJyNtb3ZpZV9wbGF5ZXJ8MCddLAogICAgICAgICd3d3cudHdpdGNoLnR2JzogWycuanMtY29udHJvbC1mdWxsc2NyZWVuLW92ZXJsYXl8MScsICcucGwtY29udHJvbHMtdG9wfDQnXSwKICAgICAgICAnd3d3Lmh1eWEuY29tJzogWycjZGFubXVkaXYyfCN2aWRlb0NvbnRhaW5lcicsICcjcGxheWVyLXZpZGVvfCN2aWRlb0NvbnRhaW5lciddLAogICAgICAgICd3d3cuaHVvbWFvLmNvbSc6IFsnI215LWdpZnQtc3RhZ2V8I2g1LXBsYXlpbmctYm94J10sCiAgICAgICAgJ2F2Z2xlLmNvbSc6IFsnI3ZpZGVvLXBsYXllcl9odG1sNV9hcGl8MScsICcjdmpzLWxvZ29icmFuZC1pbWFnZXwyJ10sCiAgICAgICAgJ3d3dy5iaWxpYmlsaS5jb20nOiBbJyNiaWxpYmlsaVBsYXllciB2aWRlb3w0JywgJy5iaWxpYmlsaS1wbGF5ZXItaW5mb3wyJ10sCiAgICAgICAgJ3d3dy5wb3JuaHViLmNvbSc6IFsnLm1ocDExMzhfZXZlbnRDYXRjaGVyfDInXSwKICAgICAgICAnd3d3LnJlZHR1YmUuY29tJzogWycubWhwMTEzOF9ldmVudENhdGNoZXJ8MSddLAogICAgICAgICd3d3cueW91cG9ybi5jb20nOiBbJy5taHAxMTM4X2V2ZW50Q2F0Y2hlcnwxJ10sCiAgICAgICAgJ3d3dy5pY291cnNlMTYzLm9yZyc6IFsnLnV4LXZpZGVvLXBsYXllciAuYmJnfDMnXSwKICAgICAgICAnd3d3LnBhbmRhLnR2JzogWycjcm9vbS1wbGF5ZXItdmlkZW8tZGFubXUgZGl2fC5oNXBsYXllci1wbGF5ZXItY29udGFpbmVyJywgJy5yb29tLXRpbWVsaW5lLXJlY29yZC1idG58Lmg1cGxheWVyLXBsYXllci1jb250YWluZXInXSwKICAgICAgICAndmsuY29tJzogWycudmlkZW9wbGF5ZXJfbWVkaWF8MSddLAogICAgICAgICd3d3cuZG91eXUuY29tJzogWycuZGFubXUtd3JhcCB2aWRlb3wyJywgJyNqcy1yb29tLXZpZGVvIGNhbnZhc3wjanMtcm9vbS12aWRlbycsICcjanMtcm9vbS12aWRlbyB2aWRlb3wjanMtcm9vbS12aWRlbyddLAogICAgICAgICdzdG9yZS5zdGVhbXBvd2VyZWQuY29tJzogWycjaGlnaGxpZ2h0X3BsYXllcl9hcmVhIHZpZGVvfDInXSwKICAgICAgICAndmltZW8uY29tJzogWycucGxheWVyIC50YXJnZXR8MScsICcucGxheWVyIC5jYXJkc3wyJ10sCiAgICAgICAgJ2VjY2hpLml3YXJhLnR2JzogWycjdmlkZW8tcGxheWVyIHZpZGVvfDEnXSwKICAgICAgICAnbGl2ZS5iaWxpYmlsaS5jb20nOiBbJy5iaWxpYmlsaS1saXZlLXBsYXllci12aWRlby1kYW5tYWt1fDInLCAnLmJpbGliaWxpLWxpdmUtcGxheWVyLXZpZGVvLWdpZnR8MiddLAogICAgICAgICd2LnFxLmNvbSc6IFsnI3RlbnZpZGVvX3BsYXllciAudHhwX3NoYWRvd3wzJywgJyN2aWRlb19jb250YWluZXJfYm9keSAudHhwX3NoYWRvd3wzJ10KICAgIH07CgogICAgLy9pZnJhbWXmkq3mlL7lmajmmL7npLrmjInpkq7op4TliJkKICAgIC8vaWZyYW1l5YWz6ZSu5a2XaWTjgIFjbGFzc25hbWXjgIFzcmMKICAgIHZhciBpZnJhbWVSdWxlcyA9IC9wbGF5fHlvdXR1YmVcLmNvbVwvZW1iZWR8dmlkZW98bW92aWV8YW5pbWV8Zmx2fG1wNHx2XC55b3VrdVwuY29tfHd3d1wuaXFpeWlcLmNvbXx2XC5xcVwuY29tfHd3d1wubGVcLmNvbS9pOwogICAgLy/nvZHnq5nln5/lkI0KICAgIHZhciBpZnJhbWVVcmxSdWxlcyA9IFsKICAgICAgICAnd3d3LmZyZWVtdnR2LmNvbScsCiAgICAgICAgJ3R3bWVpanUuY29tJywKICAgICAgICAnd3d3MS5mbW92aWVzLnBlJywKICAgICAgICAnd3d3Mi53YXRjaGFzaWFuLmNvJywKICAgICAgICAncHV0bG9ja2VyLm5pbmphJywKICAgICAgICAna2lzc2hlbnRhaS5uZXQnLAogICAgICAgICd3d3cud2F0Y2hzZXJpZXMuYWMnLAogICAgICAgICd3d3cucGFuZGEudHYnLAogICAgICAgICdhbmltZWZsdi5uZXQnLAogICAgICAgICd3d3cudm9kbG9ja2VyLmNpdHknLAogICAgICAgICdwcm9qZWN0d2F0Y2hzZXJpZXMuY29tJywKICAgICAgICAncmV5YW5pbWUuY29tJwogICAgXTsKCiAgICAvL+iHquWKqOe8qeaUvuWGheWxguWGheaSreaUvuWZqOinhOWImQogICAgdmFyIGZ1bGxJZnJhbWVQbGF5ZXJSdWxlcyA9IFsKICAgICAgICAndmlkbm9kZS5uZXQnLAogICAgICAgICdrLXZpZC5uZXQnLAogICAgICAgICd2LnFxLmNvbScsCiAgICAgICAgJ25ld3BsYXllci5qZnJmdC5jb20nLAogICAgICAgICdwbGF5ZXIuMDA1LnR2JywKICAgICAgICAncGxheWVyLnhjbWguY2MnLAogICAgICAgICd3d3cuYXVyb3JhdmlkLnRvJywKICAgICAgICAnd3d3Lm1wNHVwbG9hZC5jb20nLAogICAgICAgICd2b2Rsb2NrZXIuY29tJywKICAgICAgICAnNTJkb25nbS5kdWFwcC5jb20nCiAgICBdOwoKICAgIC8vZmxhc2jmuLjmiI/pobXpnaLvvIzkuI3lnKhmbGFzaOS4iuaYvuekuui/mOWOn+aMiemSrgogICAgdmFyIGV4Y2x1ZGVSYnRuUnVsZXMgPSBbCiAgICAgICAgJ3d3dy5kbW0uY29tJywKICAgICAgICAnd3d3LmRtbS5jby5qcCcsCiAgICAgICAgJ3d3dy40Mzk5LmNvbScsCiAgICAgICAgJ3d3dy4zMzY2LmNvbScsCiAgICAgICAgJ2ZsYXNoLjE3MTczLmNvbScsCiAgICAgICAgJ3d3dy43azdrLmNvbScKICAgIF07CgogICAgaWYgKGV4Y2x1ZGVSYnRuUnVsZXMuaW5kZXhPZihkb2N1bWVudC5sb2NhdGlvbi5ob3N0bmFtZSkgIT0gLTEpIHsKICAgICAgICBpc1JidG4gPSBmYWxzZTsKICAgIH0KCiAgICBpZiAod2luZG93LnRvcCAhPT0gd2luZG93LnNlbGYpIHsKICAgICAgICBpc0lmcmFtZSA9IHRydWU7CiAgICB9CgogICAgaWYgKG5hdmlnYXRvci5sYW5ndWFnZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09ICd6aC1jbicpIHsKICAgICAgICBidG5UZXh0ID0gewogICAgICAgICAgICBvdXQ6ICfnvZHpobXlhajlsY8nLAogICAgICAgICAgICBpbm5lcjogJ+WGheWxguWFqOWxjycsCiAgICAgICAgICAgIHJlc3RvcmU6ICfov5jljp/lpKflsI8nCiAgICAgICAgfTsKICAgIH0gZWxzZSB7CiAgICAgICAgYnRuVGV4dCA9IHsKICAgICAgICAgICAgb3V0OiAnTWF4aW1pemUnLAogICAgICAgICAgICBpbm5lcjogJ008YnIvPkE8YnIvPlgnLAogICAgICAgICAgICByZXN0b3JlOiAnUmVzdG9yZScKICAgICAgICB9OwogICAgfQoKICAgIGlmICgvRmlyZWZveC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHsKICAgICAgICBicm93c2VyID0gJ2ZpcmVmb3gnOwogICAgfSBlbHNlIGlmICgvQ2hyb21lL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkgewogICAgICAgIGJyb3dzZXIgPSAnY2hyb21lJzsKICAgIH0gZWxzZSB7CiAgICAgICAgYnJvd3NlciA9ICdvdGhlcic7CiAgICB9CgogICAgdmFyIGNyZWF0ZUJ1dHRvbiA9IGZ1bmN0aW9uKGlkKSB7CiAgICAgICAgdmFyIGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RiZGl2Jyk7CiAgICAgICAgYnRuLmlkID0gaWQ7CiAgICAgICAgYnRuLm9uY2xpY2sgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgbWF4aW1pemUucGxheWVyQ29udHJvbCgpOwogICAgICAgIH07CiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChidG4pOwogICAgICAgIHJldHVybiBidG47CiAgICB9OwoKICAgIHZhciB0b29sID0gewogICAgICAgIGdldFJlY3Q6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICAgICAgdmFyIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICAgICAgICB2YXIgc2Nyb2xsID0gdG9vbC5nZXRTY3JvbGwoKTsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIHBhZ2VYOiByZWN0LmxlZnQgKyBzY3JvbGwubGVmdCwKICAgICAgICAgICAgICAgIHBhZ2VZOiByZWN0LnRvcCArIHNjcm9sbC50b3AsCiAgICAgICAgICAgICAgICBzY3JlZW5YOiByZWN0LmxlZnQsCiAgICAgICAgICAgICAgICBzY3JlZW5ZOiByZWN0LnRvcAogICAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgaXNGdWxsQ2xpZW50OiBmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgIHZhciBjbGllbnQgPSB0b29sLmdldENsaWVudCgpOwogICAgICAgICAgICB2YXIgcmVjdCA9IHRvb2wuZ2V0UmVjdChlbGVtZW50KTsKICAgICAgICAgICAgaWYgKE1hdGguYWJzKGNsaWVudC53aWR0aCAtIGVsZW1lbnQub2Zmc2V0V2lkdGgpIDwgMjEgJiYgTWF0aC5hYnMoY2xpZW50LmhlaWdodCAtIGVsZW1lbnQub2Zmc2V0SGVpZ2h0KSA8IDIxICYmIHJlY3Quc2NyZWVuWSA8IDEwICYmIHJlY3Quc2NyZWVuWCA8IDIwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgaXNIdG1sNUZ1bGxDbGllbnQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHsKICAgICAgICAgICAgdmFyIGNsaWVudCA9IHRvb2wuZ2V0Q2xpZW50KCk7CiAgICAgICAgICAgIHZhciByZWN0ID0gdG9vbC5nZXRSZWN0KGVsZW1lbnQpOwogICAgICAgICAgICB2YXIgdyA9IGNsaWVudC53aWR0aCAtIGVsZW1lbnQub2Zmc2V0V2lkdGg7CiAgICAgICAgICAgIHZhciBoID0gY2xpZW50LmhlaWdodCAtIGVsZW1lbnQub2Zmc2V0SGVpZ2h0OwogICAgICAgICAgICBpZiAodyA+PSAwICYmIGggPj0gMCkgewogICAgICAgICAgICAgICAgaWYgKCh3IDwgMjEgJiYgcmVjdC5zY3JlZW5YIDwgMjApIHx8IChoIDwgMjEgJiYgcmVjdC5zY3JlZW5ZIDwgMTApKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICB9LAogICAgICAgIGdldFNjcm9sbDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBsZWZ0OiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQsCiAgICAgICAgICAgICAgICB0b3A6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AKICAgICAgICAgICAgfTsKICAgICAgICB9LAogICAgICAgIGdldENsaWVudDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICB3aWR0aDogZG9jdW1lbnQuY29tcGF0TW9kZSA9PSAnQ1NTMUNvbXBhdCcgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggOiBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoLAogICAgICAgICAgICAgICAgaGVpZ2h0OiBkb2N1bWVudC5jb21wYXRNb2RlID09ICdDU1MxQ29tcGF0JyA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgOiBkb2N1bWVudC5ib2R5LmNsaWVudEhlaWdodAogICAgICAgICAgICB9OwogICAgICAgIH0sCiAgICAgICAgYWRkU3R5bGU6IGZ1bmN0aW9uKGNzcykgewogICAgICAgICAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpOwogICAgICAgICAgICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJzsKICAgICAgICAgICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpOwogICAgICAgICAgICBzdHlsZS5hcHBlbmRDaGlsZChub2RlKTsKICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7CiAgICAgICAgICAgIHJldHVybiBzdHlsZTsKICAgICAgICB9CiAgICB9OwoKICAgIHZhciBzZXRCdXR0b24gPSB7CiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIC8v6Ziy5q2i6aG16Z2i6ISa5pys5bmy5omw77yM6YeN5paw5Yid5aeL5YyW5qC35byPCiAgICAgICAgICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllckNvbnRyb2xCdG4nKSkgewogICAgICAgICAgICAgICAgaW5pdCgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChpc0lmcmFtZSAmJiAhaXNGdWxsSWZyYW1lUGxheWVyICYmIGZ1bGxJZnJhbWVQbGF5ZXJSdWxlcy5pbmRleE9mKGRvY3VtZW50LmxvY2F0aW9uLmhvc3RuYW1lKSAhPSAtMSkgewogICAgICAgICAgICAgICAgaWYgKHBsYXllcikgewogICAgICAgICAgICAgICAgICAgIG1heGltaXplLmNoZWNrUGFyZW50KCk7CiAgICAgICAgICAgICAgICAgICAgbWF4aW1pemUuYWRkQ2xhc3MoKTsKICAgICAgICAgICAgICAgICAgICB0b29sLmFkZFN0eWxlKCcjaHRtbFRvb3RoYnJ1c2ggI2JvZHlUb290aGJydXNoIC5wbGF5ZXJUb290aGJydXNoIHtsZWZ0OjBweCAhaW1wb3J0YW50O3dpZHRoOjEwMHZ3ICFpbXBvcnRhbnQ7fScpOwogICAgICAgICAgICAgICAgICAgIGlzRnVsbElmcmFtZVBsYXllciA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRvb2wuaXNGdWxsQ2xpZW50KHBsYXllcikgfHwgaXNGdWxsSWZyYW1lUGxheWVyKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGlzSWZyYW1lICYmIHBsYXllci5ub2RlTmFtZSA9PSAnVklERU8nICYmIHRvb2wuaXNIdG1sNUZ1bGxDbGllbnQocGxheWVyKSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuc2hvdygpOwogICAgICAgIH0sCiAgICAgICAgc2hvdzogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGhhbmRsZS5sZWF2ZVBsYXllciwgZmFsc2UpOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICBtb3VzZS5sZWF2ZSA9IHBsYXllci5vbm1vdXNlbGVhdmU7CiAgICAgICAgICAgICAgICBwbGF5ZXIub25tb3VzZWxlYXZlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmxlYXZlUGxheWVyKCk7CiAgICAgICAgICAgICAgICAgICAgcGxheWVyLm9ubW91c2VsZWF2ZSA9IG1vdXNlLmxlYXZlOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIWZ1bGxTdGF0dXMpIHsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGhhbmRsZS5zY3JvbGxGaXgsIGZhbHNlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb250cm9sQnRuLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICBjb250cm9sQnRuLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7CiAgICAgICAgICAgIHRoaXMubG9jYXRlKCk7CiAgICAgICAgfSwKICAgICAgICBsb2NhdGU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgcGxheWVyUmVjdCA9IHRvb2wuZ2V0UmVjdChwbGF5ZXIpOwogICAgICAgICAgICBpZiAocGxheWVyUmVjdC5wYWdlWSA8IDIwIHx8IGZ1bGxTdGF0dXMpIHsKICAgICAgICAgICAgICAgIGlmIChmdWxsU3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgY29udHJvbEJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdwbGF5ZXJDb250cm9sQnRuQ29sJyk7CiAgICAgICAgICAgICAgICAgICAgcGxheWVyUmVjdC5zY3JlZW5ZID0gcGxheWVyUmVjdC5zY3JlZW5ZICsgNTA7CiAgICAgICAgICAgICAgICAgICAgcGxheWVyUmVjdC5zY3JlZW5YID0gcGxheWVyUmVjdC5zY3JlZW5YIC0gMzA7CiAgICAgICAgICAgICAgICAgICAgY29udHJvbEJ0bi5pbm5lckhUTUwgPSBidG5UZXh0LnJlc3RvcmU7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHBsYXllclJlY3Quc2NyZWVuWSA9IHBsYXllclJlY3Quc2NyZWVuWSArIDIwOwogICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyh0b29sLmdldENsaWVudCgpLndpZHRoIC0gcGxheWVyLm9mZnNldFdpZHRoKSA8IDIxICYmIE1hdGguYWJzKHRvb2wuZ2V0Q2xpZW50KCkuaGVpZ2h0IC0gcGxheWVyLm9mZnNldEhlaWdodCkgPiAyMSkgewogICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJSZWN0LnNjcmVlblggPSBwbGF5ZXJSZWN0LnNjcmVlblggKyA0NDsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJSZWN0LnNjcmVlblggPSBwbGF5ZXJSZWN0LnNjcmVlblggKyA2NDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgY29udHJvbEJ0bi5jbGFzc0xpc3QuYWRkKCdwbGF5ZXJDb250cm9sQnRuQ29sJyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGlzSWZyYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xCdG4uaW5uZXJIVE1MID0gYnRuVGV4dC5pbm5lcjsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sQnRuLmlubmVySFRNTCA9IGJ0blRleHQub3V0OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChicm93c2VyID09ICdmaXJlZm94JyAmJiBmdWxsU3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgY29udHJvbEJ0bi5zdHlsZS5vcGFjaXR5ID0gJzEnOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjb250cm9sQnRuLnN0eWxlLm9wYWNpdHkgPSAnMC41JzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbnRyb2xCdG4uY2xhc3NMaXN0LnJlbW92ZSgncGxheWVyQ29udHJvbEJ0bkNvbCcpOwogICAgICAgICAgICAgICAgY29udHJvbEJ0bi5zdHlsZS5vcGFjaXR5ID0gJzAuNSc7CiAgICAgICAgICAgICAgICBjb250cm9sQnRuLmlubmVySFRNTCA9IGJ0blRleHQub3V0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnRyb2xCdG4uc3R5bGUudG9wID0gcGxheWVyUmVjdC5zY3JlZW5ZIC0gMjAgKyAncHgnOwogICAgICAgICAgICBjb250cm9sQnRuLnN0eWxlLmxlZnQgPSBwbGF5ZXJSZWN0LnNjcmVlblggLSA2NCArIHBsYXllci5vZmZzZXRXaWR0aCArICdweCc7CiAgICAgICAgfQogICAgfTsKCiAgICB2YXIgaGFuZGxlID0gewogICAgICAgIGdldFBsYXllcjogZnVuY3Rpb24oZSkgewogICAgICAgICAgICBpZiAoZnVsbFN0YXR1cykgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldDsKICAgICAgICAgICAgaWYgKGh0bWw1UnVsZXNbZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWVdKSB7CiAgICAgICAgICAgICAgICB2YXIgb3ZlcmxheSA9IFtdLAogICAgICAgICAgICAgICAgICAgIHBsYXllck51bSA9IFtdOwogICAgICAgICAgICAgICAgdmFyIG92ZXJsYXlSdWxlcyA9IGh0bWw1UnVsZXNbZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWVdOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdmVybGF5UnVsZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcnVsZXMgPSBvdmVybGF5UnVsZXNbaV0uc3BsaXQoJ3wnKTsKICAgICAgICAgICAgICAgICAgICBvdmVybGF5W2ldID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChydWxlc1swXSk7CiAgICAgICAgICAgICAgICAgICAgcGxheWVyTnVtW2ldID0gcnVsZXNbMV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG92ZXJsYXkubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG92ZXJsYXlbaV0ubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG92ZXJsYXlbaV1bal0gPT0gdGFyZ2V0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaHRtbDVQbGF5ZXIgPSB0YXJnZXQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKE51bWJlcihwbGF5ZXJOdW1baV0pKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgcGxheWVyTnVtW2ldOyBrKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDVQbGF5ZXIgPSBodG1sNVBsYXllci5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDVQbGF5ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBsYXllck51bVtpXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyID0gaHRtbDVQbGF5ZXI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRCdXR0b24uaW5pdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIH0KICAgICAgICAgICAgc3dpdGNoICh0YXJnZXQubm9kZU5hbWUpIHsKICAgICAgICAgICAgICAgIGNhc2UgJ0lGUkFNRSc6CiAgICAgICAgICAgICAgICAgICAgaWYgKCFpZnJhbWVSdWxlcy50ZXN0KHRhcmdldC5jbGFzc05hbWUpICYmICFpZnJhbWVSdWxlcy50ZXN0KHRhcmdldC5zcmMpICYmICFpZnJhbWVSdWxlcy50ZXN0KHRhcmdldC5pZCkgJiYgaWZyYW1lVXJsUnVsZXMuaW5kZXhPZihkb2N1bWVudC5sb2NhdGlvbi5ob3N0bmFtZSkgPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmxlYXZlUGxheWVyKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNhc2UgJ09CSkVDVCc6CiAgICAgICAgICAgICAgICBjYXNlICdFTUJFRCc6CiAgICAgICAgICAgICAgICBjYXNlICdWSURFTyc6CiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldC5vZmZzZXRXaWR0aCA+IDk5ICYmIHRhcmdldC5vZmZzZXRIZWlnaHQgPiA5OSkgewogICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIgPSB0YXJnZXQ7CiAgICAgICAgICAgICAgICAgICAgICAgIHNldEJ1dHRvbi5pbml0KCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICBoYW5kbGUubGVhdmVQbGF5ZXIoKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgbGVhdmVQbGF5ZXI6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoY29udHJvbEJ0bi5zdHlsZS52aXNpYmlsaXR5ID09ICd2aXNpYmxlJykgewogICAgICAgICAgICAgICAgY29udHJvbEJ0bi5zdHlsZS5vcGFjaXR5ID0gJyc7CiAgICAgICAgICAgICAgICBjb250cm9sQnRuLnN0eWxlLnZpc2liaWxpdHkgPSAnJzsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgcGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBoYW5kbGUubGVhdmVQbGF5ZXIsIGZhbHNlKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9CiAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBoYW5kbGUuc2Nyb2xsRml4LCBmYWxzZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHNjcm9sbEZpeDogZnVuY3Rpb24oZSkgewogICAgICAgICAgICBjbGVhclRpbWVvdXQoYmFja1N0eWxlLnNjcm9sbEZpeFRpbWVyKTsKICAgICAgICAgICAgYmFja1N0eWxlLnNjcm9sbEZpeFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHNldEJ1dHRvbi5sb2NhdGUoKTsKICAgICAgICAgICAgfSwgMjApOwogICAgICAgIH0sCiAgICAgICAgaG90S2V5OiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIC8v6buY6K6k6YCA5Ye66ZSu5Li6RVND44CC6ZyA6KaB5L+u5pS55Li65YW25LuW5b+r5o236ZSu55qE6K+35pCc57SiImtleWNvZGUi77yM5L+u5pS55Li65oyJ6ZSu5a+55bqU55qE5pWw5a2X44CCCiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gMjcpIHsKICAgICAgICAgICAgICAgIG1heGltaXplLnBsYXllckNvbnRyb2woKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgcmVzdG9yZUJ1dHRvbjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmIChpc0lmcmFtZSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHN3aXRjaCAoYnJvd3NlcikgewogICAgICAgICAgICAgICAgY2FzZSAnY2hyb21lJzoKICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93Lm91dGVyV2lkdGggPCB3aW5kb3cuc2NyZWVuLndpZHRoIC0gMTApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0QnV0dG9uLnNob3coKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICdmaXJlZm94JzoKICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LmlubmVyV2lkdGggPCB3aW5kb3cuc2NyZWVuLndpZHRoIC0gMTApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0QnV0dG9uLnNob3coKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9OwoKICAgIHZhciBtYXhpbWl6ZSA9IHsKICAgICAgICBwbGF5ZXJDb250cm9sOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKCFwbGF5ZXIpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmNoZWNrUGFyZW50KCk7CiAgICAgICAgICAgIGlmICghZnVsbFN0YXR1cykgewogICAgICAgICAgICAgICAgdGhpcy5mdWxsV2luKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLnNtYWxsV2luKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGNoZWNrUGFyZW50OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcGFyZW50QXJyYXkgPSBbXTsKICAgICAgICAgICAgdmFyIGZ1bGwgPSBwbGF5ZXI7CiAgICAgICAgICAgIHdoaWxlIChmdWxsID0gZnVsbC5wYXJlbnROb2RlKSB7CiAgICAgICAgICAgICAgICBpZiAoZnVsbC5ub2RlTmFtZSA9PSAnQk9EWScpIHsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChmdWxsLmdldEF0dHJpYnV0ZSkgewogICAgICAgICAgICAgICAgICAgIHBhcmVudEFycmF5LnB1c2goZnVsbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGZ1bGxXaW46IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoIWZ1bGxTdGF0dXMpIHsKICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIGhhbmRsZS5nZXRQbGF5ZXIsIGZhbHNlKTsKICAgICAgICAgICAgICAgIGlmIChpc1JidG4pIHsKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgaGFuZGxlLnJlc3RvcmVCdXR0b24sIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNlLm92ZXIgPSBwbGF5ZXIub25tb3VzZW92ZXI7CiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5vbm1vdXNlb3ZlciA9IGhhbmRsZS5yZXN0b3JlQnV0dG9uOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJhY2tTdHlsZSA9IHsKICAgICAgICAgICAgICAgICAgICBodG1sSWQ6IGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5pZCwKICAgICAgICAgICAgICAgICAgICBib2R5SWQ6IGRvY3VtZW50LmJvZHkuaWQKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWUgPT0gJ3d3dy55b3V0dWJlLmNvbScpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcigneXRkLXdhdGNoLnl0ZC1wYWdlLW1hbmFnZXInKSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3l0ZC13YXRjaC55dGQtcGFnZS1tYW5hZ2VyJykuaGFzQXR0cmlidXRlKCd0aGVhdGVyLXJlcXVlc3RlZF8nKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnl0cC1zaXplLWJ1dHRvbicpLmNsaWNrKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrU3R5bGUueXRiU3RhZ2VDaGFuZ2UgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndhdGNoLXN0YWdlLW1vZGUnKSkgewogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcueXRwLXNpemUtYnV0dG9uJykuY2xpY2soKTsKICAgICAgICAgICAgICAgICAgICAgICAgYmFja1N0eWxlLnl0YlN0YWdlQ2hhbmdlID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWUgPT0gJ2xpdmUuYmlsaWJpbGkuY29tJyAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYmlsaWJpbGktbGl2ZS1wbGF5ZXInKSAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYmlsaWJpbGktbGl2ZS1wbGF5ZXInKS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGxheWVyLXN0YXRlJykgIT0gJ3dlYi1mdWxsc2NyZWVuJykgewogICAgICAgICAgICAgICAgICAgIHVuc2FmZVdpbmRvdy4kKCcuYmlsaWJpbGktbGl2ZS1wbGF5ZXItdmlkZW8tZGFubWFrdScpLmRibGNsaWNrKCk7CiAgICAgICAgICAgICAgICAgICAgYmFja1N0eWxlLmJpbGlQbGF5ZXJDaGFuZ2UgPSB0cnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmxvY2F0aW9uLmhvc3RuYW1lID09ICd2LnlvdWt1LmNvbScgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnZwYWN0aW9udjVfaWZyYW1lX3dyYXAnKSAmJiB0b29sLmdldFJlY3QocGxheWVyKS5wYWdlWSArIHBsYXllci5vZmZzZXRIZWlnaHQgLSB0b29sLmdldFJlY3QoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnZwYWN0aW9udjVfaWZyYW1lX3dyYXAnKSkucGFnZVkgPiAyMCkgewogICAgICAgICAgICAgICAgICAgIHBsYXllci5zdHlsZS5jc3NUZXh0ID0gJ2hlaWdodDogY2FsYygxMDB2aCArIDUwcHgpICFpbXBvcnRhbnQ7JzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5sb2NhdGlvbi5ob3N0bmFtZSA9PSAnd3d3LnR1ZG91LmNvbScgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFjdGlvbl9idXR0b25zLmZpeCcpICYmIHRvb2wuZ2V0UmVjdChwbGF5ZXIpLnBhZ2VZICsgcGxheWVyLm9mZnNldEhlaWdodCAtIHRvb2wuZ2V0UmVjdChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWN0aW9uX2J1dHRvbnMuZml4JykpLnBhZ2VZID4gMjApIHsKICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuc3R5bGUuY3NzVGV4dCA9ICdoZWlnaHQ6IGNhbGMoMTAwdmggKyA1NXB4KSAhaW1wb3J0YW50Oyc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWUgPT0gJ21wLndlaXhpbi5xcS5jb20nIHx8IGRvY3VtZW50LmxvY2F0aW9uLmhvc3RuYW1lID09ICd3d3cuZG9zZWVpbmcuY29tJykgewogICAgICAgICAgICAgICAgICAgIHBsYXllci5zdHlsZS5jc3NUZXh0ID0gJyc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsZWZ0QnRuLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgcmlnaHRCdG4uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICAgICAgICAgICAgICBjb250cm9sQnRuLnN0eWxlLmRpc3BsYXkgPSAnJzsKICAgICAgICAgICAgICAgIHRoaXMuYWRkQ2xhc3MoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmdWxsU3RhdHVzID0gdHJ1ZTsKICAgICAgICB9LAogICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLmlkID0gJ2h0bWxUb290aGJydXNoJzsKICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5pZCA9ICdib2R5VG9vdGhicnVzaCc7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyZW50QXJyYXkubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIHBhcmVudEFycmF5W2ldLmNsYXNzTGlzdC5hZGQoJ3BhcmVudFRvb3RoYnJ1c2gnKTsKICAgICAgICAgICAgICAgIC8v54i25YWD57SgcG9zaXRpb246Zml4ZWTkvJrpgKDmiJDlsYLnuqfplJnkubEKICAgICAgICAgICAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKHBhcmVudEFycmF5W2ldKS5wb3NpdGlvbiA9PSAnZml4ZWQnKSB7CiAgICAgICAgICAgICAgICAgICAgcGFyZW50QXJyYXlbaV0uY2xhc3NMaXN0LmFkZCgnYWJzb2x1dGVUb290aGJydXNoJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGxheWVyLmNsYXNzTGlzdC5hZGQoJ3BsYXllclRvb3RoYnJ1c2gnKTsKICAgICAgICAgICAgaWYgKHBsYXllci5ub2RlTmFtZSA9PSAnVklERU8nKSB7CiAgICAgICAgICAgICAgICBiYWNrU3R5bGUuY29udHJvbHMgPSBwbGF5ZXIuY29udHJvbHM7CiAgICAgICAgICAgICAgICBwbGF5ZXIuY29udHJvbHMgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpOwogICAgICAgIH0sCiAgICAgICAgc21hbGxXaW46IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoaXNSYnRuKSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIHBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCBoYW5kbGUucmVzdG9yZUJ1dHRvbiwgZmFsc2UpOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge30KICAgICAgICAgICAgICAgIGlmIChtb3VzZS5vdmVyICE9ICdsaXN0ZW5lcicpIHsKICAgICAgICAgICAgICAgICAgICBwbGF5ZXIub25tb3VzZW92ZXIgPSBtb3VzZS5vdmVyOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5pZCA9IGJhY2tTdHlsZS5odG1sSWQ7CiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuaWQgPSBiYWNrU3R5bGUuYm9keUlkOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmVudEFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBwYXJlbnRBcnJheVtpXS5jbGFzc0xpc3QucmVtb3ZlKCdwYXJlbnRUb290aGJydXNoJyk7CiAgICAgICAgICAgICAgICBwYXJlbnRBcnJheVtpXS5jbGFzc0xpc3QucmVtb3ZlKCdhYnNvbHV0ZVRvb3RoYnJ1c2gnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBwbGF5ZXIuY2xhc3NMaXN0LnJlbW92ZSgncGxheWVyVG9vdGhicnVzaCcpOwogICAgICAgICAgICBpZiAoZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWUgPT0gJ3d3dy55b3V0dWJlLmNvbScgJiYgYmFja1N0eWxlLnl0YlN0YWdlQ2hhbmdlKSB7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcueXRwLXNpemUtYnV0dG9uJykuY2xpY2soKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWUgPT0gJ2xpdmUuYmlsaWJpbGkuY29tJyAmJiBiYWNrU3R5bGUuYmlsaVBsYXllckNoYW5nZSkgewogICAgICAgICAgICAgICAgdW5zYWZlV2luZG93LiQoJy5iaWxpYmlsaS1saXZlLXBsYXllci12aWRlby1kYW5tYWt1JykuZGJsY2xpY2soKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWUgPT0gJ3YueW91a3UuY29tJyB8fCBkb2N1bWVudC5sb2NhdGlvbi5ob3N0bmFtZSA9PSAnd3d3LnR1ZG91LmNvbScpIHsKICAgICAgICAgICAgICAgIHBsYXllci5zdHlsZS5jc3NUZXh0ID0gJyc7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHBsYXllci5ub2RlTmFtZSA9PSAnVklERU8nKSB7CiAgICAgICAgICAgICAgICBwbGF5ZXIuY29udHJvbHMgPSBiYWNrU3R5bGUuY29udHJvbHM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGVmdEJ0bi5zdHlsZS5kaXNwbGF5ID0gJyc7CiAgICAgICAgICAgIHJpZ2h0QnRuLnN0eWxlLmRpc3BsYXkgPSAnJzsKICAgICAgICAgICAgY29udHJvbEJ0bi5zdHlsZS5kaXNwbGF5ID0gJyc7CiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIGhhbmRsZS5nZXRQbGF5ZXIsIGZhbHNlKTsKICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdyZXNpemUnKSk7CiAgICAgICAgICAgIGZ1bGxTdGF0dXMgPSBmYWxzZTsKICAgICAgICB9CiAgICB9OwoKICAgIHZhciBpbml0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgY29udHJvbEJ0biA9IGNyZWF0ZUJ1dHRvbigncGxheWVyQ29udHJvbEJ0bicpOwogICAgICAgIGxlZnRCdG4gPSBjcmVhdGVCdXR0b24oJ2xlZnRGdWxsU3RhY2tCdXR0b24nKTsKICAgICAgICByaWdodEJ0biA9IGNyZWF0ZUJ1dHRvbigncmlnaHRGdWxsU3RhY2tCdXR0b24nKTsKICAgICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShjb250cm9sQnRuKS5wb3NpdGlvbiAhPSAnZml4ZWQnKSB7CiAgICAgICAgICAgIHRvb2wuYWRkU3R5bGUoWwogICAgICAgICAgICAgICAgJyNodG1sVG9vdGhicnVzaCwgI2JvZHlUb290aGJydXNoIHtvdmVyZmxvdzpoaWRkZW4gIWltcG9ydGFudDt6b29tOjEwMCUgIWltcG9ydGFudH0nLAogICAgICAgICAgICAgICAgJyNodG1sVG9vdGhicnVzaCAjYm9keVRvb3RoYnJ1c2ggLnBhcmVudFRvb3RoYnJ1c2gge292ZXJmbG93OnZpc2libGUgIWltcG9ydGFudDt6LWluZGV4OmF1dG8gIWltcG9ydGFudDt0cmFuc2Zvcm06bm9uZSAhaW1wb3J0YW50Oy13ZWJraXQtdHJhbnNmb3JtLXN0eWxlOmZsYXQgIWltcG9ydGFudDt0cmFuc2l0aW9uOm5vbmUgIWltcG9ydGFudDtjb250YWluOm5vbmUgIWltcG9ydGFudDt9JywKICAgICAgICAgICAgICAgICcjaHRtbFRvb3RoYnJ1c2ggI2JvZHlUb290aGJydXNoIC5hYnNvbHV0ZVRvb3RoYnJ1c2gge3Bvc2l0aW9uOmFic29sdXRlICFpbXBvcnRhbnQ7fScsCiAgICAgICAgICAgICAgICAnI2h0bWxUb290aGJydXNoICNib2R5VG9vdGhicnVzaCAucGxheWVyVG9vdGhicnVzaCB7cG9zaXRpb246Zml4ZWQgIWltcG9ydGFudDt0b3A6MHB4ICFpbXBvcnRhbnQ7bGVmdDoxcHggIWltcG9ydGFudDt3aWR0aDpjYWxjKDEwMHZ3IC0gMnB4KSAhaW1wb3J0YW50O2hlaWdodDoxMDB2aCAhaW1wb3J0YW50O21heC13aWR0aDpub25lICFpbXBvcnRhbnQ7bWF4LWhlaWdodDpub25lICFpbXBvcnRhbnQ7bWluLXdpZHRoOjAgIWltcG9ydGFudDttaW4taGVpZ2h0OjAgIWltcG9ydGFudDttYXJnaW46MCAhaW1wb3J0YW50O3BhZGRpbmc6MCAhaW1wb3J0YW50O3otaW5kZXg6MjE0NzQ4MzY0NSAhaW1wb3J0YW50O2JvcmRlcjpub25lICFpbXBvcnRhbnQ7YmFja2dyb3VuZC1jb2xvcjojMDAwICFpbXBvcnRhbnQ7dHJhbnNmb3JtOm5vbmUgIWltcG9ydGFudDt9JywKICAgICAgICAgICAgICAgICcjaHRtbFRvb3RoYnJ1c2ggI2JvZHlUb290aGJydXNoIC5wbGF5ZXJUb290aGJydXNoIHZpZGVvIHtvYmplY3QtZml0OmNvbnRhaW4gIWltcG9ydGFudDt9JywKICAgICAgICAgICAgICAgICcjcGxheWVyQ29udHJvbEJ0biB7dmlzaWJpbGl0eTpoaWRkZW47b3BhY2l0eTowO2Rpc3BsYXk6bm9uZTt0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlO2N1cnNvcjogcG9pbnRlcjtmb250OiAxMnB4ICLlvq7ova/pm4Xpu5EiO21hcmdpbjowO3dpZHRoOjY0cHg7aGVpZ2h0OjIwcHg7bGluZS1oZWlnaHQ6MjBweDtib3JkZXI6bm9uZTt0ZXh0LWFsaWduOiBjZW50ZXI7cG9zaXRpb246IGZpeGVkO3otaW5kZXg6MjE0NzQ4MzY0NjtiYWNrZ3JvdW5kLWNvbG9yOiAjMjdBOUQ4O2NvbG9yOiAjRkZGO30gI3BsYXllckNvbnRyb2xCdG46aG92ZXIge3Zpc2liaWxpdHk6dmlzaWJsZTtvcGFjaXR5OjE7YmFja2dyb3VuZC1jb2xvcjojMjc3NEQ4O30nLAogICAgICAgICAgICAgICAgJyNwbGF5ZXJDb250cm9sQnRuLnBsYXllckNvbnRyb2xCdG5Db2wge3dpZHRoOjIwcHg7aGVpZ2h0OjY0cHg7bGluZS1oZWlnaHQ6MTZweDt9JywKICAgICAgICAgICAgICAgICcjbGVmdEZ1bGxTdGFja0J1dHRvbntkaXNwbGF5Om5vbmU7cG9zaXRpb246Zml4ZWQ7d2lkdGg6MXB4O2hlaWdodDoxMDB2aDt0b3A6MDtsZWZ0OjA7ei1pbmRleDoyMTQ3NDgzNjQ2O2JhY2tncm91bmQ6IzAwMDt9JywKICAgICAgICAgICAgICAgICcjcmlnaHRGdWxsU3RhY2tCdXR0b257ZGlzcGxheTpub25lO3Bvc2l0aW9uOmZpeGVkO3dpZHRoOjFweDtoZWlnaHQ6MTAwdmg7dG9wOjA7cmlnaHQ6MDt6LWluZGV4OjIxNDc0ODM2NDY7YmFja2dyb3VuZDojMDAwO30nCiAgICAgICAgICAgIF0uam9pbignXG4nKSk7CiAgICAgICAgICAgIHRvb2wuYWRkU3R5bGUoWwogICAgICAgICAgICAgICAgLy93ZWlibwogICAgICAgICAgICAgICAgJyNodG1sVG9vdGhicnVzaCAjYm9keVRvb3RoYnJ1c2ggLm5vZGUtdmlkZW8ubm9kZS1mdWxsIHZpZGVvLCNodG1sVG9vdGhicnVzaCAjYm9keVRvb3RoYnJ1c2ggLldCX2g1dmlkZW8gdmlkZW8ge3dpZHRoOiBpbmhlcml0ICFpbXBvcnRhbnQ7aGVpZ2h0OiBpbmhlcml0ICFpbXBvcnRhbnQ7fScsCiAgICAgICAgICAgICAgICAvL2RvdXl1CiAgICAgICAgICAgICAgICAnI2h0bWxUb290aGJydXNoICNib2R5VG9vdGhicnVzaCAjZG91eXVfcm9vbV9ub3JtYWxfZmxhc2hfcHJveHlfYm94IHtwb3NpdGlvbjpmaXhlZCAhaW1wb3J0YW50O3RvcDowcHggIWltcG9ydGFudDtsZWZ0OjFweCAhaW1wb3J0YW50O3dpZHRoOmNhbGMoMTAwdncgLSAycHgpICFpbXBvcnRhbnQ7aGVpZ2h0OjEwMHZoICFpbXBvcnRhbnQ7bWF4LXdpZHRoOm5vbmUgIWltcG9ydGFudDttYXgtaGVpZ2h0Om5vbmUgIWltcG9ydGFudDttaW4td2lkdGg6MCAhaW1wb3J0YW50O21pbi1oZWlnaHQ6MCAhaW1wb3J0YW50O21hcmdpbjowICFpbXBvcnRhbnQ7cGFkZGluZzowICFpbXBvcnRhbnQ7ei1pbmRleDoyMTQ3NDgzNjQ1ICFpbXBvcnRhbnQ7Ym9yZGVyOm5vbmUgIWltcG9ydGFudDtiYWNrZ3JvdW5kLWNvbG9yOiMwMDAgIWltcG9ydGFudDt0cmFuc2Zvcm06bm9uZSAhaW1wb3J0YW50O30nCiAgICAgICAgICAgIF0uam9pbignXG4nKSk7CiAgICAgICAgfQogICAgfTsKCiAgICBpbml0KCk7CgogICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgaGFuZGxlLmdldFBsYXllciwgZmFsc2UpOwogICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZS5ob3RLZXksIGZhbHNlKTsKCn0pKCk7"},{"name":"YouTube +","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://www.youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":["*://www.youtube.com/tv*","*://www.youtube.com/embed/*","*://www.youtube.com/live_chat*"],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":true,"orig_connects":[]}},"storage":{"ts":1521543167144,"data":{"particleSettings":"s{\"GEN_BTTR_NTF\":true,\"GEN_SUB_LIST\":true,\"GEN_INF_SCRL\":true,\"GEN_BLUE_GLOW\":true,\"GEN_PPOT_ON\":true,\"VID_END_SHRE\":true,\"VID_DFLT_QLTY\":\"auto\",\"VID_PLST_ATPL\":true,\"VID_PLST_RVRS\":true,\"VID_PLR_ATPL\":true,\"VID_PLR_ALVIS\":true,\"VID_PLR_SIZE_MEM\":true,\"VID_PLR_VOL_LDN\":true,\"VID_POST_TIME\":true,\"VID_VID_CNT\":true,\"VID_DESC_SHRT\":true,\"VID_PPOT_SZ\":533,\"VID_PLR_HTML5\":true,\"BLK_ON\":true,\"floaterX\":2000,\"floaterY\":2000,\"firstTime\":false,\"volLev\":50,\"advOpts\":true,\"blacklist\":[],\"extLang\":{\"zh_CN\":{\"YTSETS\":\"YouTube+ 设置\",\"ADV_OPTS\":\"高级选项\",\"SUB_PLST\":\"播放最新上传的内容\",\"PPOT_OPEN\":\"在弹出窗口中打开\",\"BLCK_ADD\":\"添加到黑名单\",\"BLCK_EDIT\":\"编辑\",\"BLCK_SAVE\":\"保存\",\"BLCK_CLSE\":\"关闭\",\"CNSL_AP\":\"自动播放\",\"CNSL_RPT\":\"循环播放\",\"CNSL_SVTH\":\"打开缩略图\",\"CNSL_SS\":\"画面截图\",\"CNSL_SS_CLS\":\"关闭\",\"CNSL_PPOT\":\"弹出播放视频\",\"CNSL_FLBR\":\"网页全屏模式\",\"CNSL_CINM_MD\":\"影院模式\",\"CNSL_YTSC\":\"YouTube 快捷键列表\",\"PLST_AP\":\"自动播放\",\"PLST_RVRS\":\"倒序排列\",\"SHOW_CMTS\":\"显示评论\",\"HIDE_CMTS\":\"隐藏评论\",\"GLB_IMPR\":\"导入/导出设置\",\"GLB_LOCL_LANG\":\"点击修改 YT+ 语言\",\"GLB_LOCL_LANG_CSTM\":\"本地化\",\"GLB_IMPR_SAVE\":\"保存并加载\",\"GLB_RSET\":\"重置\",\"GLB_RSET_CONF\":\"这将重置YT+的所有设置和黑名单。是否要继续？\",\"GLB_SVE\":\"保存\",\"GLB_SVE_SETS\":\"设置已保存\",\"GLB_RMBL\":\"从黑名单中移除\",\"FTR_DESC\":\"详细了解\",\"GEN\":\"常规\",\"VID\":\"视频\",\"CHN\":\"频道\",\"BLK\":\"黑名单\",\"ABT\":\"关于\",\"HLP\":\"帮助\",\"DNT\":\"捐赠\",\"GEN_TTL\":\"通用设置\",\"GEN_GEN\":\"常规\",\"GEN_LYT\":\"布局\",\"GEN_LOCL_LANG\":\"使用自定义的 YT+ 语言包\",\"GEN_PPOT_ON\":\"启用弹出模式\",\"GEN_DSBL_ADS\":\"禁止视频页面以外的广告\",\"GEN_INF_SCRL\":\"在信息源列表启用无限滚动\",\"GEN_YT_LOGO_LINK\":\"YouTube 标志重定向到订阅页\",\"GEN_SUB_LIST\":\"启用订阅播放列表\",\"GEN_REM_APUN\":\"去除自动播放下一个\",\"GEN_SPF_OFF\":\"禁用动态加载\",\"GEN_HIDE_FTR\":\"隐藏页脚\",\"GEN_BLUE_GLOW\":\"去除点击过的按钮周围的蓝色光圈\",\"GEN_HDE_RECM_SDBR\":\"隐藏推荐频道侧边栏\",\"GEN_HDE_SRCH_SDBR\":\"隐藏搜索结果侧边栏\",\"GEN_HDE_CHN_SDBR\":\"隐藏频道侧边栏\",\"GEN_CMPT_TTLS\":\"在信息源中使用缩略标题\",\"GEN_DSB_HVRC\":\"禁用悬停卡片\",\"GEN_BTTR_NTF\":\"改进的蓝色通知框\",\"GEN_GRID_SUBS\":\"在订阅中使用网格布局\",\"GEN_GRID_SRCH\":\"在搜索结果中使用网格布局\",\"VID_TTL\":\"视频设置\",\"VID_PLR\":\"播放器设置\",\"VID_PLR_LYT\":\"播放器布局\",\"VID_DFLT_QLTY\":\"默认视频质量：\",\"VID_DFLT_QLTY_AUTO\":\"自动\",\"VID_DFLT_QLTY_TNY\":\"144p\",\"VID_DFLT_QLTY_SML\":\"240p\",\"VID_DFLT_QLTY_MDM\":\"360p\",\"VID_DFLT_QLTY_LRG\":\"480p\",\"VID_DFLT_QLTY_720\":\"720p\",\"VID_DFLT_QLTY_1080\":\"1080p\",\"VID_DFLT_QLTY_1440\":\"1440p\",\"VID_DFLT_QLTY_2160\":\"2160p (4k)\",\"VID_DFLT_QLTY_2880\":\"2880p (5k)\",\"VID_DFLT_QLTY_ORIG\":\"4320p (8k)\",\"VID_PLR_ALVIS\":\"阅读评论时保持播放器可见\",\"VID_PLR_ALVIS_WDTH\":\"悬浮播放器宽度\",\"VID_PLR_ALVIS_RST\":\"重设位置\",\"VID_PLR_ALVIS_SCRL_TOP\":\"返回顶部\",\"VID_PLR_ATPL\":\"自动播放视频\",\"VID_LAYT\":\"布局\",\"VID_VID_CNT\":\"显示已上传视频数及链接\",\"VID_POST_TIME\":\"显示视频已发布时间\",\"VID_HIDE_DETLS\":\"隐藏视频详细信息\",\"VID_HIDE_COMS\":\"评论区\",\"VID_HIDE_COMS_SHOW\":\"显示\",\"VID_HIDE_COMS_HIDE\":\"隐藏\",\"VID_HIDE_COMS_REM\":\"去除\",\"VID_END_SHRE\":\"禁用视频结束时的分享面板\",\"VID_PLST\":\"播放列表\",\"VID_PLST_ATPL\":\"启用播放列表的自动播放按钮\",\"VID_PLST_RVRS\":\"启用播放列表的倒序排列按钮\",\"VID_PLR_SIZE_MEM\":\"记住播放模式\",\"VID_VOL_WHEEL\":\"使用鼠标滚轮更改音量\",\"VID_PLR_VOL_MEM\":\"记住音量\",\"VID_PLR_VOL_LDN\":\"禁用 YouTube 响度统一化\",\"VID_PLR_ADS\":\"禁用视频页面中的广告\",\"VID_PLR_ALACT\":\"播放器快捷键始终生效\",\"VID_SUB_ADS\":\"仅启用已订阅频道中视频的广告\",\"VID_PLR_ANTS\":\"禁用注释\",\"VID_PLR_HFR\":\"禁用高帧率 (60fps)\",\"VID_PLR_HTML5\":\"可能时使用 HTML 5 播放器\",\"VID_PLR_CC\":\"禁用字幕和隐藏式字幕\",\"VID_PLR_INFO\":\"启用稍后观看按钮\",\"VID_PLR_FIT\":\"为剧场模式适配页面\",\"VID_PLR_FIT_WDTH\":\"适配页面最大宽度:\",\"VID_PLR_DYN_SIZE\":\"默认视图中禁用播放器动态调节尺寸\",\"VID_DESC_SHRT\":\"小巧的视频描述按钮\",\"VID_TTL_CMPT\":\"缩略视频描述标题\",\"VID_PPOT_SZ\":\"弹出播放器的大小\",\"VID_LAYT_AUTO_PNL\":\"自动展开视频描述\",\"GEN_CHN_DFLT_PAGE\":\"默认的频道页面：\",\"GEN_CHN_DFLT_PAGE_DFLT\":\"默认\",\"GEN_CHN_DFLT_PAGE_VID\":\"视频\",\"GEN_CHN_DFLT_PAGE_PL\":\"播放列表\",\"GEN_CHN_DFLT_PAGE_CHN\":\"频道\",\"GEN_CHN_DFLT_PAGE_DISC\":\"讨论\",\"GEN_CHN_DFLT_PAGE_ABT\":\"关于\",\"BLK_TTL\":\"黑名单设置\",\"BLK_BLK\":\"黑名单\",\"BLK_ON\":\"启用黑名单\",\"ABT_TTL\":\"相关信息和实用链接\",\"ABT_THKS\":\"鸣谢：\",\"ABT_THKS_YEPPHA\":\"，他们的成果给此项目带来了灵感，没有他们，今天这些就不会存在。\",\"ABT_THKS_USERSCRIPT\":\" 使开发和发行第三方软件的任务无比简单。\",\"ABT_THKS_STACKOV\":\" 无价的信息对软件开发做出了巨大贡献。\",\"ABT_INFO\":\"官方页面\",\"ABT_LNK_GHB\":\"GitHub\",\"ABT_LNK_GRFK\":\"Greasy Fork\",\"ABT_LNK_OPNU\":\"OpenUserJS\",\"WLCM\":\"感谢您安装 YouTube+\",\"WLCMSTRT\":\"您可以点击上面的按钮来自定义您的设置\",\"WLCMFTRS\":\"点击这里查看所有特性的介绍\",\"LOCALE\":\"中文 (简体)\",\"lastMod\":1516345589000},\"nextCheck\":1522147965749}}"}},"enabled":false,"position":2,"file_url":"https://github.com/ParticleCore/Particle/raw/master/src/Userscript/YouTubePlus.user.js","uuid":"8f4192a0-daa4-48a6-b25b-4b8d95356b18","source":""},{"name":"Youtube Best Video Downloader 2","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://www.youtube.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1521543202766,"data":{}},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/19592-youtube-best-video-downloader-2/code/Youtube%20Best%20Video%20Downloader%202.user.js","uuid":"4f9e2c7f-87cf-46e7-86d5-9f6af936ba76","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgWW91dHViZSBCZXN0IFZpZGVvIERvd25sb2FkZXIgMgovLyBAZGVzY3JpcHRpb24gRG93bmxvYWQgZXZlcnkgWW91VHViZSB2aWRlbyB5b3Ugd2FudCBhbmQgeW91IGNhbiBkb3dubG9hZCB0aGVtIGFzIEZ1bGwtSEQgTVA0LCBGTFYsIDNHUCwgTVAzIDE5MmticHMsIE00QSBhbmQgQUFDIGZvcm1hdHMuIEFsc28gdGh1bWJuYWlscyBhbmQgc3VidGl0bGVzIGNhbiBiZSBkb3dubG9hZGVkISBFYXN5ICYgRmFzdCEKLy8gQGhvbWVwYWdlVVJMIGh0dHBzOi8vYnZkMi5ubC8KLy8gQGF1dGhvciBCVkQyCi8vIEB2ZXJzaW9uIDguMDIKLy8gQGRhdGUgMDUtMTAtMjAxNwovLyBAbmFtZXNwYWNlIEJWRDIKLy8gQG1hdGNoIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tLyoKLy8gQHJlcXVpcmUgaHR0cDovL2NvZGUuanF1ZXJ5LmNvbS9qcXVlcnktMS4xMi40Lm1pbi5qcwovLyBAZ3JhbnQgbm9uZQovLyBAbGljZW5zZSBNSVQgTGljZW5zZQovLyBAaWNvbiBodHRwczovL2J2ZDIubmwvaW1hZ2VzL2ljb242NC5wbmcKLy8gPT0vVXNlclNjcmlwdD09CmZ1bmN0aW9uIGdvKCkgewogICAgc3RhcnQoKTsKICAgIHJlbW92ZWZyYW1lKCk7Cn0KCndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzcGZkb25lJywgZ28sIGZhbHNlKTsKd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBnbywgZmFsc2UpOwp3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigneXQtbmF2aWdhdGUtZmluaXNoJywgZ28sIGZhbHNlKTsKCmZ1bmN0aW9uIHN0YXJ0KCkgewogICAgZnVuY3Rpb24gaXNNYXRlcmlhbCgpIHsKICAgICAgICB2YXIgdGVtcDsKICAgICAgICB0ZW1wID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigieXRkLWFwcCwgW3NyYyo9J3BvbHltZXInXSxsaW5rW2hyZWYqPSdwb2x5bWVyJ10iKTsKICAgICAgICBpZiAoIXRlbXApIHsgLy8gb2xkIFVJCiAgICAgICAgICAgIHRlbXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0ZW1wbGF0ZSIpOwogICAgICAgICAgICB0ZW1wLmlubmVySFRNTCA9IC8vCiAgICAgICAgICAgICAgICBgPGRpdiBpZD0nbWF0ZXJpYWwtbm90aWNlJyBzdHlsZT0nYm9yZGVyLXJhZGl1czoycHg7Y29sb3I6I0ZGRjtwYWRkaW5nOjEwcHg7YmFja2dyb3VuZC1jb2xvcjojZmYwMDAwO2JveC1zaGFkb3c6MCAwIDNweCByZ2JhKDAsMCwwLC41KTtmb250LXNpemU6MThweDtwb3NpdGlvbjpmaXhlZDtib3R0b206MjBweDtyaWdodDo1MHB4O3otaW5kZXg6OTk5OTknPgoJCQkJPHN0cm9uZz48aW5zPldBUk5JTkcgOiA8L2lucz48L3N0cm9uZz5CZXN0IFZpZGVvIERvd25sb2FkZXIgMiBpcyA8Qj5Pbmx5IGNvbXBhdGlibGUgd2l0aCB0aGUgbmV3IFlvdVR1YmUgTWF0ZXJpYWwgTGF5b3V0PC9CPjxicj4KCQkJCTxhIGhyZWY9J2h0dHBzOi8veW91dHViZS5jb20vbmV3JyB0YXJnZXQ9J19ibGFuaycgc3R5bGU9J2ZvbnQtd2VpZ2h0OmJvbGQ7Jz5DbGljayBoZXJlPC9hPiB0byBhY3RpdmF0ZSB0aGUgbmV3IFlvdVR1YmUgTWF0ZXJpYWwgTGF5b3V0Ljxicj4KCQkJCTxici8+PGJyLz4KCQkJCTxzcGFuIGlkPSdjbG9zZScgb25jbGljaz0nZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1hdGVyaWFsLW5vdGljZSIpLnJlbW92ZSgpOyByZXR1cm4gZmFsc2U7JyBhbGlnbj0nY2VudGVyJyBTVFlMRT0nZGlzcGxheTpibG9jazt3aWR0aDoxMDBweDtoZWlnaHQ6IDEwMCU7bWFyZ2luOiAwIGF1dG87Jz48c3Ryb25nPjxpbnM+PGEgaHJlZj0iIj4gW1hdIENMT1NFIDwvYT48L2lucz48L3N0cm9uZz48L3NwYW4+CgkJCQk8L2Rpdj5gOwogICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQodGVtcC5jb250ZW50LmZpcnN0Q2hpbGQpOwogICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCJkYXRhLXVzZXJfc2V0dGluZ3MiKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQogICAgaXNNYXRlcmlhbCgpOwogICAgdmFyIGxhc3R1cmwgPSAiIjsKCiAgICBmdW5jdGlvbiBjaGVjaygpIHsKICAgICAgICBpZiAobG9jYXRpb24uaHJlZiA9PSBsYXN0dXJsKSByZXR1cm47CiAgICAgICAgbGFzdHVybCA9IGxvY2F0aW9uLmhyZWY7CiAgICAgICAgaWYgKGxhc3R1cmwuaW5kZXhPZigid2F0Y2g/dj0iKSkgcmVtb3ZlZnJhbWUoKTsKICAgIH0KICAgIHNldEludGVydmFsKGNoZWNrLCAxMDAwKTsKCiAgICBmdW5jdGlvbiByZW1vdmVmcmFtZSgpIHsKICAgICAgICB2YXIgZnJtX2RpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdFWFRfRElWJyk7CiAgICAgICAgaWYgKGZybV9kaXYpIHsKICAgICAgICAgICAgZnJtX2Rpdi5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGZybV9kaXYpOwogICAgICAgIH0KICAgIH0KCiAgICBidmQyX2J0bl9vbmNsaWNrID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogICAgICAgIHZhciB2aWRlb191cmwgPSAnaHR0cHM6Ly9idmQyLm5sLzgvZG93bmxvYWQvP3VybD0nICsgdXJsOwogICAgICAgIGFkZGlmcmFtZSh2aWRlb191cmwsICcyNTAnKTsKICAgIH07CgogICAgZ2V0U3BhbiA9IGZ1bmN0aW9uKHRleHQsIGNsYXNzTmFtZSkgewogICAgICAgIHZhciBfdG4gPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KTsKICAgICAgICB2YXIgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNwYW4iKTsKICAgICAgICBzcGFuLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTsKICAgICAgICBzcGFuLmFwcGVuZENoaWxkKF90bik7CiAgICAgICAgcmV0dXJuIHNwYW47CiAgICB9OwoKICAgIGNyZWF0ZUJ1dHRvbiA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBvYmogPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdG9wLXJvdz4jc3Vic2NyaWJlLWJ1dHRvbicpOwogICAgICAgIGlmIChvYmogIT09IG51bGwpIHsKICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGJ1dHRvbiBoYXMgYWxyZWFkeSBiZWVuIGNyZWF0ZWQKICAgICAgICAgICAgdmFyIGJ0blJvdyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiZXN0dmQyJyk7CiAgICAgICAgICAgIGlmIChidG5Sb3cgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIHZhciBiZXN0dmQyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgICAgICAgICAgICBiZXN0dmQyLmlkID0gImJlc3R2ZDIiOwogICAgICAgICAgICAgICAgYmVzdHZkMi5jbGFzc05hbWUgPSAic3R5bGUtc2NvcGUiOwoKICAgICAgICAgICAgICAgIHZhciBidmQyX2J0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgICAgICAgICAgYnZkMl9idG4uY2xhc3NOYW1lID0gInN0eWxlLXNjb3BlIGJ2ZDJfYnRuIjsKCiAgICAgICAgICAgICAgICBidmQyX2J0bi5zdHlsZSA9ICJiYWNrZ3JvdW5kLWNvbG9yOiBncmVlbjsgYm9yZGVyOiBzb2xpZCAycHggZ3JlZW47IGJvcmRlci1yYWRpdXM6IDJweDsgY29sb3I6IHdoaXRlOyBwYWRkaW5nOiAwcHggMTVweDsgZm9udC1zaXplOiAxNHB4OyBjdXJzb3I6cG9pbnRlcjsgaGVpZ2h0OjMzcHg7bWFyZ2luLXJpZ2h0OiA3cHg7bWFyZ2luLXRvcDogN3B4O2xpbmUtaGVpZ2h0OiAzM3B4O2ZvbnQtd2VpZ2h0OiA1MDA7IGRpc3BsYXk6aW5saW5lLWJsb2NrOyI7CgogICAgICAgICAgICAgICAgYnZkMl9idG4uYXBwZW5kQ2hpbGQoZ2V0U3BhbigiRG93bmxvYWQiLCAiIikpOwogICAgICAgICAgICAgICAgYnZkMl9idG4ub25jbGljayA9IGJ2ZDJfYnRuX29uY2xpY2s7CgogICAgICAgICAgICAgICAgb2JqLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGJlc3R2ZDIsIG9iaik7CiAgICAgICAgICAgICAgICBiZXN0dmQyLmFwcGVuZENoaWxkKGJ2ZDJfYnRuKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH07CgogICAgZnVuY3Rpb24gYWRkaWZyYW1lKHNyYywgaGVpZ2h0KSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdmFyIHBlZ1BsYWNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dhdGNoLWRlc2NyaXB0aW9uJyk7CiAgICAgICAgICAgIGlmIChwZWdQbGFjZSA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgcGVnUGxhY2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGxheW5hdi12aWRlby1kZXRhaWxzJyk7CiAgICAgICAgICAgICAgICBpZiAocGVnUGxhY2UgPT09IG51bGwpCiAgICAgICAgICAgICAgICAgICAgcGVnUGxhY2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2F0Y2g3LWFjdGlvbi1wYW5lbHMnKTsKICAgICAgICAgICAgICAgIGlmIChwZWdQbGFjZSA9PT0gbnVsbCkKICAgICAgICAgICAgICAgICAgICBwZWdQbGFjZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3YXRjaDgtc2Vjb25kYXJ5LWFjdGlvbnMnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0VYVF9GUkFNRScpOwogICAgICAgICAgICBpZiAoaWZyYW1lID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICBkaXYgPSBDcmVhdGVJZnJhbWVEaXYoaGVpZ2h0KTsKICAgICAgICAgICAgICAgIGlmcmFtZSA9IENyZWF0ZUlmcmFtZShoZWlnaHQpOwogICAgICAgICAgICAgICAgZGl2LmFwcGVuZENoaWxkKGlmcmFtZSk7CiAgICAgICAgICAgICAgICBlbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWFpbj4jaW5mbycpOwogICAgICAgICAgICAgICAgZWxlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGRpdiwgZWxlLm5leHRTaWJsaW5nKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBzcmMgKz0gJyZ0eXBlPURvd25sb2FkJzsKICAgICAgICAgICAgc3JjICs9ICcnOwogICAgICAgICAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCJzcmMiLCBzcmMpOwogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBDcmVhdGVJZnJhbWUoaGVpZ2h0KSB7CiAgICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7CiAgICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgiaWQiLCAiRVhUX0ZSQU1FIik7CiAgICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgid2lkdGgiLCAiNjQwcHgiKTsKICAgICAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCJoZWlnaHQiLCBoZWlnaHQpOwogICAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoImJvcmRlciIsICIwIik7CiAgICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgic2Nyb2xsaW5nIiwgIm5vIik7CiAgICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgic3R5bGUiLCAiYm9yZGVyOiAwIG5vbmU7Iik7CiAgICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgic2FuZGJveCIsICJhbGxvdy1zY3JpcHRzIGFsbG93LXBvcHVwcyBhbGxvdy1zYW1lLW9yaWdpbiIpOwogICAgICAgIHJldHVybiBpZnJhbWU7CiAgICB9CgogICAgZnVuY3Rpb24gQ3JlYXRlSWZyYW1lRGl2KGhlaWdodCkgewogICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICBkaXYuc2V0QXR0cmlidXRlKCJpZCIsICJFWFRfRElWIik7CiAgICAgICAgZGl2LnN0eWxlLndpZHRoID0gJzY0MHB4JzsKICAgICAgICBkaXYuc3R5bGUubWFyZ2luID0gJzVweCAwcHggNXB4IDBweCc7CiAgICAgICAgZGl2LnN0eWxlLnBhZGRpbmcgPSAnMHB4JzsKICAgICAgICBkaXYuc3R5bGUuaGVpZ2h0ID0gJzkwcHgnOwogICAgICAgIGRpdi5zdHlsZS5vdmVyZmxvdyA9ICd2aXNpYmxlJzsKICAgICAgICByZXR1cm4gZGl2OwogICAgfQogICAgdmFyIGludGVydmFsQ2hlY2sgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHsKICAgICAgICBjcmVhdGVCdXR0b24oKTsKICAgIH0sIDI1MCk7Cn0="},{"name":"视频站启用html5播放器","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["*://pan.baidu.com/*","*://v.qq.com/*","*://v.sports.qq.com/*","*://film.qq.com/*","*://view.inews.qq.com/*","*://news.qq.com/*","*://v.youku.com/v_show/id_*","*://*.tudou.com/v/*","*://v.163.com/*.html*","*://ent.163.com/*.html*","*://news.163.com/*.html*","*://news.163.com/special/*","*://study.163.com/course/*.htm?courseId=*","*://news.sina.com.cn/*","*://video.sina.com.cn/*","*://video.sina.cn/*","*://weibo.com/*","*://*.weibo.com/*","*://*.le.com/*.html*","*://*.lesports.com/*.html*","*://tv.sohu.com/*.shtml*","*://*.tv.sohu.com/*.shtml*","*://film.sohu.com/album/*","*://www.fun.tv/vplay/*","*://m.fun.tv/*","*://www.yy.com/*","*://www.huya.com/*","https://*.douyu.com/*","https://www.panda.tv/*","*://star.longzhu.com/*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1521543244424,"data":{}},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/30545-%E8%A7%86%E9%A2%91%E7%AB%99%E5%90%AF%E7%94%A8html5%E6%92%AD%E6%94%BE%E5%99%A8/code/%E8%A7%86%E9%A2%91%E7%AB%99%E5%90%AF%E7%94%A8html5%E6%92%AD%E6%94%BE%E5%99%A8.user.js","uuid":"7c5a0a33-c9de-44b9-9247-6f76e2c17cb9","source":""},{"name":"Resize Image On \"Open image in new tab\"","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["http://*.googleusercontent.com/*","https://*.googleusercontent.com/*","http://*.media.tumblr.com/*","https://*.media.tumblr.com/*","http://secure.static.tumblr.com/*","https://secure.static.tumblr.com/*","http://*.bp.blogspot.com/*","https://*.bp.blogspot.com/*","http://*.sinaimg.cn/*","https://*.sinaimg.cn/*","http://*.sinaimg.com/*","https://*.sinaimg.com/*","http://*.twimg.com/*","https://*.twimg.com/*","http://*.zhimg.com/*","https://*.zhimg.com/*","http://*.douban.com/view/*","https://*.douban.com/view/*","http://*.doubanio.com/view/*","https://*.doubanio.com/view/*","http://imgsrc.baidu.com/*","https://imgsrc.baidu.com/*","http://imgsrc.bdimg.com/*","https://imgsrc.bdimg.com/*","http://*.hiphotos.baidu.com/*","https://*.hiphotos.baidu.com/*","http://*.hiphotos.bdimg.com/*","https://*.hiphotos.bdimg.com/*","http://imgsa.baidu.com/*","https://imgsa.baidu.com/*","http://imgsa.bdimg.com/*","https://imgsa.bdimg.com/*","http://images.akamai.steamusercontent.com/*","https://images.akamai.steamusercontent.com/*","http://steamuserimages-a.akamaihd.net/*","https://steamuserimages-a.akamaihd.net/*","http://*.artstation.com/*","https://*.artstation.com/*","http://i.ytimg.com/*","https://i.ytimg.com/*","http://*.ggpht.com/*","https://*.ggpht.com/*","http://*.pinimg.com/*","https://*.pinimg.com/*","http://*.hdslb.com/*","https://*.hdslb.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1521543448312,"data":{}},"enabled":true,"position":5,"file_url":"https://greasyfork.org/scripts/2312-resize-image-on-open-image-in-new-tab/code/Resize%20Image%20On%20%22Open%20image%20in%20new%20tab%22.user.js","uuid":"8f956833-d163-41ed-b831-34ce65d11f97","source":""},{"name":"DownAlbum","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["htt*://*.facebook.com/*","htt*://*.facebook.com/*/*","htt*://instagram.com/*","htt*://*.instagram.com/*","htt*://twitter.com/*","htt*://weibo.com/*","htt*://www.pinterest.com/*","htt*://www.pinterest.*/*","htt*://ask.fm/*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":["htt*://*static*.facebook.com*","htt*://*channel*.facebook.com*","htt*://developers.facebook.com/*","htt*://upload.facebook.com/*","htt*://*onnect.facebook.com/*","htt*://*acebook.com/connect*","htt*://*.facebook.com/plugins/*","htt*://*.facebook.com/l.php*","htt*://*.facebook.com/ai.php*","htt*://*.facebook.com/extern/*","htt*://*.facebook.com/pagelet/*","htt*://api.facebook.com/static/*","htt*://*.facebook.com/contact_importer/*","htt*://*.facebook.com/ajax/*","htt*://www.facebook.com/places/map*_iframe.php*","https://www.facebook.com/xti.php","https://*.ak.facebook.com/*","https://www.facebook.com/ajax/pagelet/generic.php/*","https://www.facebook.com/*/plugins/*","https://www.facebook.com/xti.php*"],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1521543485674,"data":{}},"enabled":true,"position":6,"file_url":"https://raw.githubusercontent.com/inDream/DownAlbum/master/DownAlbum.user.js","uuid":"91dc4d9c-9432-43b7-b09e-7fa7e41984cd","source":""},{"name":"惠惠购物助手","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["http://*.jd.com/*","http://*.taobao.com/*","http://*.tmall.com/*","https://*.jd.com/*","https://*.taobao.com/*","https://*.tmall.com/*","https://*.amazon.com/*","http://*.001town.com/*","http://*.01goo.com/*","http://*.03l.cn/*","http://*.133china.com/*","http://*.139shop.com/*","http://yxp.163.com/*","http://*.168dg.com/*","http://*.186mall.com/*","http://*.18to82.com/*","http://*.1j.cn/*","http://*.22shop.com/*","http://*.24dq.com/*","http://*.24quan.com/*","http://*.258sd.com/*","http://*.2688.com/*","http://*.360buy.com/*","http://*.360hqb.com/*","http://*.360kxr.com/*","http://*.360mart.com/*","http://*.365goba.com/*","http://*.38hzt.com/*","http://*.39ty.com/*","http://*.4inlook.com/*","http://*.5188bag.com/*","http://*.51buy.com/*","http://51buy.com/","http://*.51dg.com/*","http://*.51eng.com/*","http://*.51sheyuan.com/*","http://*.51youpin.com/*","http://*.520eye.com/*","http://*.52shehua.com/*","http://*.5366.com/*","http://t.58.com/*","http://*.58hua.com/*","http://*.5lux.com/*","http://*.5yth.com/*","http://*.6919.com/*","http://*.6sbuy.com/*","http://*.77toy.com/*","http://*.7caihua.com/*","http://*.7cv.com/*","http://*.7sev.com/*","http://*.80ebus.com/*","http://*.8801.net/*","http://*.919it.com/*","http://*.929.cn/*","http://*.942radio.com/*","http://b2c.958shop.com/*","http://*.96128.com/*","http://*.99pto.com/*","http://*.99read.com/*","http://*.9dadao.com/*","http://*.9you.com/*","http://*.afffff.com/*","http://*.ai356.com/*","http://*.aibang.com/*","http://*.aidai.com/*","http://*.aiju.com/*","http://*.aim36.com/*","http://*.aimer.com.cn/*","http://*.aiyingshi.com/*","http://*.aizhigu.com.cn/*","http://*.amazon.cn/*","http://*.anni.com/*","http://*.apabi.com/*","http://*.augshow.com/*","http://*.autosup.com/*","http://*.baiyjk.com/*","http://*.bbesports.com/*","http://*.bookuu.com/*","http://*.bearbuy.com.cn/*","http://*.beautyplus.cn/*","http://*.beifabook.com/*","http://*.benq.com.cn/*","http://*.best1.com/*","http://*.biaoshang.hk/*","http://*.binggo.com/*","http://*.bloves.com/*","http://*.bobomobi.com/*","http://*.bookschina.com/*","http://*.boqii.com/*","http://*.buding.com/*","http://*.buy007.com/*","http://*.buy361.cn/*","http://*.buyfine.net/*","http://*.buynow.com.cn/*","http://*.caistv.com/*","http://*.caomeipai.com/*","http://*.car339.com.cn/*","http://*.car6688.com/*","http://*.carrefour.com.cn/*","http://*.cdream.com/*","http://*.ceetop.com/*","http://*.chashu.cn/*","http://*.chedangjia.com/*","http://*.chengdecs.com/*","http://*.china-gift.com/*","http://*.china-pub.com/*","http://emall.chinapay.com/*","http://*.chinayrs.com/*","http://*.chris-tina.com/*","http://*.clady.com/*","http://*.clinique.com.cn/*","http://*.cncard.com/*","http://*.cnfse.com/*","http://*.colebuy.com/*","http://*.conslive.com/*","http://*.coo8.com/*","http://*.cosize.com/*","http://*.cosme-de.com/*","http://*.ctrip.com/*","http://*.cw100.com/*","http://*.d1.com.cn/*","http://*.daisonghua.com/*","http://*.dangdang.com/*","http://*.daoyao.com/*","http://*.woyo.com/*","http://*.dazhe.cn/*","http://*.dazhongdianqi.com.cn/*","http://*.dianpu.com/*","http://*.didatuan.com/*","http://*.disiqu.cn/*","http://*.dixintong.com/*","http://*.doulaimai.com/*","http://*.dsgoo.com/*","http://*.dtoto.com/*","http://*.duhub.com/*","http://*.duoding.com/*","http://*.e-giordano.com/*","http://*.e-lining.com/*","http://*.e-my.com.cn/*","http://*.easy361.com/*","http://*.ebaimi.com/*","http://*.eboxbuy.com/*","http://*.ebtea.com/*","http://*.ecosme.cn/*","http://*.efeihu.com/*","http://*.ehaier.com/*","http://*.ejia.com/*","http://*.enet.com.cn/*","http://*.enjoyeye.com/*","http://*.epetbar.com/*","http://*.et5155.com/*","http://*.f508.com/*","http://*.fclub.cn/*","http://*.flowerby.com/*","http://*.flowercn.com/*","http://*.gap.cn/*","http://*.godida.com/*","http://*.gome.com.cn/*","http://*.goocctv.cn/*","http://*.goodjd.com/*","http://*.goodnourish.cn/*","http://*.gou3618.com/*","http://*.gouduo.com/*","http://*.gouwulian.com/*","http://*.gouxie.com/*","http://*.goyahome.com/*","http://*.guobuy.com/*","http://*.guopi.com/*","http://*.guuoo.com/*","http://*.hany.cn/*","http://*.happigo.com/*","http://*.hit168.com.cn/*","http://*.hitao.com/*","http://*.homeold.cn/*","http://*.homevv.com/*","http://*.hongkouzi.com/*","http://*.hopebook.net/*","http://*.huachu.com.cn/*","http://*.huimeifang.cn/*","http://*.hw2008.cn/*","http://*.icaifeng.com/*","http://*.icson.com/*","http://*.ideemall.com/*","http://*.ihush.com/*","http://*.iloveyou.com.cn/*","http://*.ilovezuan.com/*","http://*.imeelee.com/*","http://*.inoble.com.cn/*","http://*.inshion.com/*","http://*.ishop.cn/*","http://*.it88.com.cn/*","http://*.itzm.com/*","http://*.iyuyou.com/*","http://*.jiajiajk.com/*","http://*.jiaju.com/*","http://*.jiatx.com/*","http://*.jiayougo.com/*","http://*.jinbaidu.com/*","http://*.jmeishop.com/*","http://*.joyran.com/*","http://*.jsbcmall.com/*","http://*.jtlhome.com/*","http://*.jumei.com/*","http://*.junph.com/*","http://*.justonline.cn/*","http://*.jxdyf.com/*","http://*.k121.com/*","http://*.kadang.com/*","http://*.keede.com.cn/*","http://*.kela.cn/*","http://*.kuaishubao.com/*","http://*.kxtkx.com/*","http://*.ladypk.com/*","http://*.laeibelle.com/*","http://*.lafaso.com/*","http://*.lamiu.com/*","http://*.lancome.com.cn/*","http://*.lashou.com/*","http://*.ledaojia.com/*","http://*.leftlady.com/*","http://*.lenovo.com.cn/*","http://*.lens2005.com/*","http://*.letao.com/*","http://*.leyou.com/*","http://*.leyou.com.cn/*","http://*.lijiababy.com.cn/*","http://*.lijigou.com/*","http://*.likebuy.com/*","http://*.likeface.com/*","http://*.lingshi.com/*","http://*.liqunshop.com/*","http://*.liyi99.com/*","http://*.locknlock.com.cn/*","http://*.lovo.cn/*","http://*.luckigo.com/*","http://*.lusen.com/*","http://*.lyceem.com/*","http://*.m18.com/*","http://*.maichawang.com/*","http://*.maimaike.cn/*","http://*.mamabb.com/*","http://*.mamahao.cn/*","http://*.mangocity.com/*","http://*.manzuo.com/*","http://*.masamaso.com/*","http://*.maxfunbuy.com/*","http://*.maywon.com/*","http://*.mbaobao.com/*","http://*.meici.com/*","http://*.meilele.com/*","http://*.meilieasy.com/*","http://*.meituan.com/*","http://*.menglu.com/*","http://*.mengmai.com/*","http://*.minibuy.com/*","http://*.mmgw.cn/*","http://*.mmuses.com/*","http://*.mobi001.com/*","http://*.mokamall.com/*","http://*.momoyoyo.com/*","http://*.montrosechina.com/*","http://*.mooiee.com/*","http://*.moonbasa.com/*","http://*.motostore.com.cn/*","http://*.mpshow.com.cn/*","http://*.naccoo.com/*","http://*.naguu.com/*","http://*.nayao.com/*","http://*.newegg.com.cn/*","http://*.newgo5.com/*","http://*.nmlch.com/*","http://*.no5.com.cn/*","http://*.nokia.com.cn/*","http://*.nonmin88.com/*","http://*.obuy.cn/*","http://*.ofcard.com/*","http://*.ogage.cn/*","http://*.okbig.com/*","http://*.okbuy.com/*","http://*.okddy.com/*","http://*.okgolf.cn/*","http://*.olomo.com/*","http://*.olympus.com.cn/*","http://*.olymsports.com/*","http://*.ono.com.cn/*","http://*.orange3c.com/*","http://*.ouku.com/*","http://*.ourtasty.com/*","http://*.outice.com/*","http://*.oyego.com/*","http://*.paixie.net/*","http://*.palcent.com/*","http://*.ocj.com.cn/*","http://*.pb89.com/*","http://*.pcarm.com/*","http://*.petyoo.com/*","http://*.pgbao.com/*","http://*.piaoliang100.com/*","http://*.pirateship.com.cn/*","http://*.popyj.com/*","http://*.pupai.cn/*","http://*.purcotton.com/*","http://*.qianxun.com/*","http://*.qingci.com/*","http://*.qinqinbaby.com/*","http://*.qmango.com/*","http://*.qumei.com/*","http://*.quwan.com/*","http://*.qxian.com/*","http://*.rayi.cn/*","http://*.redbaby.com.cn/*","http://*.robam.com/*","http://*.salala.com.cn/*","http://*.samsclub.cn/*","http://*.sanfo.com/*","http://*.sapo.com.hk/*","http://*.sasa.com/*","http://*.sasacity.com/*","http://*.sawbuy.com/*","http://*.shanghai-sports.com/*","http://*.shentop.com/*","http://*.shishangqiyi.com/*","http://*.shjdq.com/*","http://*.shnn.com/*","http://*.shopin.net/*","http://*.shoubiao.com.cn/*","http://*.sigo.cn/*","http://mall.sina.com.cn/*","http://*.sinobuy.cn/*","http://*.skcoo.com/*","http://*.skomart.com/*","http://*.snyun.com/*","http://*.sonmai.cn/*","http://*.sport2008.com.cn/*","http://*.strawberrynet.com/*","http://*.suning.com/*","http://*.sz-esun.com/*","http://*.tao3c.com/*","http://*.taoxie.cn/*","http://*.the365.com/*","http://*.thinkshop.cn/*","http://*.tian10.com/*","http://*.tiantian.com/*","http://*.junph.com/*","http://*.tieyou.com/*","http://*.togj.com/*","http://*.tooogooo.com/*","http://*.toy90.com/*","http://*.toys365.com/*","http://*.tpy100.com/*","http://*.tuniu.com/*","http://*.tztart.com/*","http://*.ugou.cn/*","http://*.uipmall.com/*","http://*.uiyi.cn/*","http://*.ushan.cn/*","http://*.uushouji.com/*","http://*.uya100.com/*","http://*.vaakav.com/*","http://*.vafox.com/*","http://*.vancl.com/*","http://*.vcotton.com/*","http://*.veedl.com/*","http://*.vegoos.com/*","http://*.venusveil.com/*","http://*.veryok.cn/*","http://*.viccol.com/*","http://*.vipshop.com/*","http://*.vipstore.com/*","http://*.vivian.cn/*","http://*.vjia.com/*","http://*.vnasi.com/*","http://*.voipyeah.com/*","http://*.w1.cn/*","http://*.waipowang.com/*","http://*.wangshanghai.com/*","http://*.wg365.com/*","http://*.winenice.com/*","http://*.wl.cn/*","http://*.womai.com/*","http://*.woye.com/*","http://*.wtaotao.com/*","http://*.wumeiwang.com/*","http://*.x-playboy.com/*","http://*.xiaokang.com/*","http://*.xiaozhuren.com/*","http://*.xinbaigo.com/*","http://*.xindou.com/*","http://*.xing800.com/*","http://*.xinhuabookstore.com/*","http://*.xiu.com/*","http://*.xtpo.cn/*","http://*.xzuan.com/*","http://*.yaja.com.cn/*","http://*.yaofang.cn/*","http://*.yasai.cn/*","http://*.yeecare.com/*","http://buy.yesky.com/*","http://*.yesmytea.com/*","http://*.yesmywine.com/*","http://*.yide.com/*","http://*.yifu.com/*","http://*.yihaodian.com/*","http://*.yintai.com/*","http://*.yinyuehe.net/*","http://*.yjcs.cn/*","http://*.yobrand.com/*","http://*.yoger.com.cn/*","http://*.yoho.cn/*","http://*.yongle.com.cn/*","http://*.yougou.com/*","http://*.youjk.com/*","http://*.yoyo18.com/*","http://*.yumaoclub.com/*","http://*.yyosso.com/*","http://*.zbird.com/*","http://*.zgcbb.com/*","http://*.zm7.cn/*","http://*.zopo.com/*","http://*.ibuying.com/*","http://*.33go.com.cn/*","http://*.xijie.com/*","http://*.nop.cn/*","http://*.asyp.com/*","http://*.sparty.cn/*","http://*.yizhedian.com/*","http://*.lvhezi.com/*","http://*.aishangbaobao.com/*","http://*.sportica.cn/*","http://*.jstsilk.cn/*","http://*.camel.com.cn/*","http://*.cottonpop.net/*","http://*.hyj.com/*","http://*.myxiequ.com/*","http://*.mfplaza.com/*","http://*.do93.com/*","http://*.3guo.cn/*","http://*.yaqifushi.com/*","http://*.trura.com/*","http://*.lbaobao.cn/*","http://*.xiutuan.com/*","http://*.usashopcn.com/*","http://*.ihaveu.com/*","http://*.vipku.com/*","http://*.vipchina.com/*","http://*.fanrry.cn/*","http://*.lesunvip.com/*","http://*.nala.com.cn/*","http://*.miqi.cn/*","http://*.meiribuy.com/*","http://*.pufung.com/*","http://*.xiaoye.com/*","http://*.hmeili.com/*","http://*.oulybuy.com/*","http://*.meifenzi.com/*","http://*.caomeishop.com/*","http://*.meifu360.com/*","http://*.bapashop.com/*","http://*.bulangxiongdi.com/*","http://*.gusubuy.com/*","http://*.opearl.net/*","http://*.ruci.cn/*","http://*.rax.cn/*","http://*.jiuxian.com/*","http://*.maimaicha.com/*","http://*.pinwine.cn/*","http://*.meiweidao.com/*","http://*.okliang.com/*","http://*.365wine.com/*","http://*.jjlg.com.cn/*","http://*.bianlishe.com/*","http://*.epkmall.com/*","http://*.gdcct.com/*","http://*.500ccc.com/*","http://*.me361.com/*","http://*.malatamobile.com/*","http://*.trioo.com/*","http://*.oohdear.com/*","http://*.yaahe.cn/*","http://*.easeeyes.com/*","http://*.dbox.cn/*","http://*.haotehui.com/*","http://*.m6go.com/*","http://*.bianyigo.com/*","http://*.okjee.com/*","http://*.mygeek.cn/*","http://*.tbb.cn/*","http://*.ushare360.com/*","http://*.gqt168.com/*","http://*.konjoy.com/*","http://*.aoliz.com/*","http://*.jianianle.com/*","http://*.akajia.com/*","http://*.miqi.com.cn/*","http://*.lehuimai.com/*","http://*.lifevc.com/*","http://*www.ouku.com/","http://nuomi.com/*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1521543498798,"data":{}},"enabled":true,"position":7,"file_url":"https://greasyfork.org/scripts/26606-%E6%83%A0%E6%83%A0%E8%B4%AD%E7%89%A9%E5%8A%A9%E6%89%8B/code/%E6%83%A0%E6%83%A0%E8%B4%AD%E7%89%A9%E5%8A%A9%E6%89%8B.user.js","uuid":"86a5aa69-146e-4684-b4cb-6f6df06de1ec","source":""},{"name":"gwdang","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["http://*.jd.com/*","https://*.jd.com/*","http://*.jd.hk/*","https://*.jd.hk/*","http://*.taobao.com/*","https://*.taobao.com/*","http://*.tmall.com/*","https://*.tmall.com/*","https://*.tmall.hk/*","http://*.yixun.com/*","http://*.51buy.com/*","http://*.yhd.com/*","http://*.suning.com/*","https://*.suning.com/*","http://*.dangdang.com/*","http://*.gome.com.cn/*","http://*.newegg.cn/*","http://*.paipai.com/*","https://*.amazon.com/*","https://*.amazon.cn/*","https://*.amazon.*/*","http://www.kjt.com/*","http://www.kaola.com/*","https://www.kaola.com/*","http://www.kaola.com.hk/*","https://www.kaola.com.hk/*","http://www.tcl.com/*","http://shop.hisense.com/*","http://*.oppo.com/*","http://shop.vivo.com.cn/*","http://www.ebay.com/*","http://t.dianping.com/*","http://*.nuomi.com/*","http://*.meituan.com/*","https://yao.95095.com/*","http://*.feiniu.com/*","http://*.meilishuo.com/*","http://*.mogujie.com/*","http://shop.coolpad.cn/*","http://*.sephora.cn/*","http://*.yesmywine.com/*","http://*.yiguo.com/*","http://*.wanggou.com/*","http://mall.jia.com/*","http://weigou.baidu.com/*","http://*.mi.com/*","http://shop.letv.com/*","http://*.handu.com/*","http://*.taoshu.com/*","http://*.1688.com/*","http://*.muyingzhijia.com/*","http://*.vmall.com/*","http://*.xiji.com/*","http://*.xijie.com/*","http://www.yougou.com/*","http://www.okbuy.com/*","http://*.001town.com/*","http://*.01goo.com/*","http://*.03l.cn/*","http://*.133china.com/*","http://*.139shop.com/*","http://yxp.163.com/*","http://*.168dg.com/*","http://*.186mall.com/*","http://*.18to82.com/*","http://*.1j.cn/*","http://*.22shop.com/*","http://*.24dq.com/*","http://*.24quan.com/*","http://*.258sd.com/*","http://*.2688.com/*","http://*.360buy.com/*","http://*.360hqb.com/*","http://*.360kxr.com/*","http://*.360mart.com/*","http://*.365goba.com/*","http://*.38hzt.com/*","http://*.39ty.com/*","http://*.4inlook.com/*","http://*.5188bag.com/*","http://*.51buy.com/*","http://51buy.com/","http://*.51dg.com/*","http://*.51eng.com/*","http://*.51sheyuan.com/*","http://*.51youpin.com/*","http://*.520eye.com/*","http://*.52shehua.com/*","http://*.5366.com/*","http://t.58.com/*","http://*.58hua.com/*","http://*.5lux.com/*","http://*.5yth.com/*","http://*.6919.com/*","http://*.6sbuy.com/*","http://*.77toy.com/*","http://*.7caihua.com/*","http://*.7cv.com/*","http://*.7sev.com/*","http://*.80ebus.com/*","http://*.8801.net/*","http://*.919it.com/*","http://*.929.cn/*","http://*.942radio.com/*","http://b2c.958shop.com/*","http://*.96128.com/*","http://*.99pto.com/*","http://*.99read.com/*","http://*.9dadao.com/*","http://*.9you.com/*","http://*.afffff.com/*","http://*.ai356.com/*","http://*.aibang.com/*","http://*.aidai.com/*","http://*.aiju.com/*","http://*.aim36.com/*","http://*.aimer.com.cn/*","http://*.aiyingshi.com/*","http://*.aizhigu.com.cn/*","http://*.amazon.cn/*","http://*.anni.com/*","http://*.apabi.com/*","http://*.augshow.com/*","http://*.autosup.com/*","http://*.baiyjk.com/*","http://*.bbesports.com/*","http://*.bookuu.com/*","http://*.bearbuy.com.cn/*","http://*.beautyplus.cn/*","http://*.beifabook.com/*","http://*.benq.com.cn/*","http://*.best1.com/*","http://*.biaoshang.hk/*","http://*.binggo.com/*","http://*.bloves.com/*","http://*.bobomobi.com/*","http://*.bookschina.com/*","http://*.boqii.com/*","http://*.buding.com/*","http://*.buy007.com/*","http://*.buy361.cn/*","http://*.buyfine.net/*","http://*.buynow.com.cn/*","http://*.caistv.com/*","http://*.caomeipai.com/*","http://*.car339.com.cn/*","http://*.car6688.com/*","http://*.carrefour.com.cn/*","http://*.cdream.com/*","http://*.ceetop.com/*","http://*.chashu.cn/*","http://*.chedangjia.com/*","http://*.chengdecs.com/*","http://*.china-gift.com/*","http://*.china-pub.com/*","http://emall.chinapay.com/*","http://*.chinayrs.com/*","http://*.chris-tina.com/*","http://*.clady.com/*","http://*.clinique.com.cn/*","http://*.cncard.com/*","http://*.cnfse.com/*","http://*.colebuy.com/*","http://*.conslive.com/*","http://*.coo8.com/*","http://*.cosize.com/*","http://*.cosme-de.com/*","http://*.ctrip.com/*","http://*.cw100.com/*","http://*.d1.com.cn/*","http://*.daisonghua.com/*","http://*.dangdang.com/*","http://*.daoyao.com/*","http://*.woyo.com/*","http://*.dazhe.cn/*","http://*.dazhongdianqi.com.cn/*","http://*.dianpu.com/*","http://*.didatuan.com/*","http://*.disiqu.cn/*","http://*.dixintong.com/*","http://*.doulaimai.com/*","http://*.dsgoo.com/*","http://*.dtoto.com/*","http://*.duhub.com/*","http://*.duoding.com/*","http://*.e-giordano.com/*","http://*.e-lining.com/*","http://*.e-my.com.cn/*","http://*.easy361.com/*","http://*.ebaimi.com/*","http://*.eboxbuy.com/*","http://*.ebtea.com/*","http://*.ecosme.cn/*","http://*.efeihu.com/*","http://*.ehaier.com/*","http://*.ejia.com/*","http://*.enet.com.cn/*","http://*.enjoyeye.com/*","http://*.epetbar.com/*","http://*.et5155.com/*","http://*.f508.com/*","http://*.fclub.cn/*","http://*.flowerby.com/*","http://*.flowercn.com/*","http://*.gap.cn/*","http://*.godida.com/*","http://*.gome.com.cn/*","http://*.goocctv.cn/*","http://*.goodjd.com/*","http://*.goodnourish.cn/*","http://*.gou3618.com/*","http://*.gouduo.com/*","http://*.gouwulian.com/*","http://*.gouxie.com/*","http://*.goyahome.com/*","http://*.guobuy.com/*","http://*.guopi.com/*","http://*.guuoo.com/*","http://*.hany.cn/*","http://*.happigo.com/*","http://*.hit168.com.cn/*","http://*.hitao.com/*","http://*.homeold.cn/*","http://*.homevv.com/*","http://*.hongkouzi.com/*","http://*.hopebook.net/*","http://*.huachu.com.cn/*","http://*.huimeifang.cn/*","http://*.hw2008.cn/*","http://*.icaifeng.com/*","http://*.icson.com/*","http://*.ideemall.com/*","http://*.ihush.com/*","http://*.iloveyou.com.cn/*","http://*.ilovezuan.com/*","http://*.imeelee.com/*","http://*.inoble.com.cn/*","http://*.inshion.com/*","http://*.ishop.cn/*","http://*.it88.com.cn/*","http://*.itzm.com/*","http://*.iyuyou.com/*","http://*.jiajiajk.com/*","http://*.jiaju.com/*","http://*.jiatx.com/*","http://*.jiayougo.com/*","http://*.jinbaidu.com/*","http://*.jmeishop.com/*","http://*.joyran.com/*","http://*.jsbcmall.com/*","http://*.jtlhome.com/*","http://*.jumei.com/*","http://*.junph.com/*","http://*.justonline.cn/*","http://*.jxdyf.com/*","http://*.k121.com/*","http://*.kadang.com/*","http://*.keede.com.cn/*","http://*.kela.cn/*","http://*.kuaishubao.com/*","http://*.kxtkx.com/*","http://*.ladypk.com/*","http://*.laeibelle.com/*","http://*.lafaso.com/*","http://*.lamiu.com/*","http://*.lancome.com.cn/*","http://*.lashou.com/*","http://*.ledaojia.com/*","http://*.leftlady.com/*","http://*.lenovo.com.cn/*","http://*.lens2005.com/*","http://*.letao.com/*","http://*.leyou.com/*","http://*.leyou.com.cn/*","http://*.lijiababy.com.cn/*","http://*.lijigou.com/*","http://*.likebuy.com/*","http://*.likeface.com/*","http://*.lingshi.com/*","http://*.liqunshop.com/*","http://*.liyi99.com/*","http://*.locknlock.com.cn/*","http://*.lovo.cn/*","http://*.luckigo.com/*","http://*.lusen.com/*","http://*.lyceem.com/*","http://*.m18.com/*","http://*.maichawang.com/*","http://*.maimaike.cn/*","http://*.mamabb.com/*","http://*.mamahao.cn/*","http://*.mangocity.com/*","http://*.manzuo.com/*","http://*.masamaso.com/*","http://*.maxfunbuy.com/*","http://*.maywon.com/*","http://*.mbaobao.com/*","http://*.meici.com/*","http://*.meilele.com/*","http://*.meilieasy.com/*","http://*.meituan.com/*","http://*.menglu.com/*","http://*.mengmai.com/*","http://*.minibuy.com/*","http://*.mmgw.cn/*","http://*.mmuses.com/*","http://*.mobi001.com/*","http://*.mokamall.com/*","http://*.momoyoyo.com/*","http://*.montrosechina.com/*","http://*.mooiee.com/*","http://*.moonbasa.com/*","http://*.motostore.com.cn/*","http://*.mpshow.com.cn/*","http://*.naccoo.com/*","http://*.naguu.com/*","http://*.nayao.com/*","http://*.newegg.com.cn/*","http://*.newgo5.com/*","http://*.nmlch.com/*","http://*.no5.com.cn/*","http://*.nokia.com.cn/*","http://*.nonmin88.com/*","http://*.obuy.cn/*","http://*.ofcard.com/*","http://*.ogage.cn/*","http://*.okbig.com/*","http://*.okbuy.com/*","http://*.okddy.com/*","http://*.okgolf.cn/*","http://*.olomo.com/*","http://*.olympus.com.cn/*","http://*.olymsports.com/*","http://*.ono.com.cn/*","http://*.orange3c.com/*","http://*.ouku.com/*","http://*.ourtasty.com/*","http://*.outice.com/*","http://*.oyego.com/*","http://*.paixie.net/*","http://*.palcent.com/*","http://*.ocj.com.cn/*","http://*.pb89.com/*","http://*.pcarm.com/*","http://*.petyoo.com/*","http://*.pgbao.com/*","http://*.piaoliang100.com/*","http://*.pirateship.com.cn/*","http://*.popyj.com/*","http://*.pupai.cn/*","http://*.purcotton.com/*","http://*.qianxun.com/*","http://*.qingci.com/*","http://*.qinqinbaby.com/*","http://*.qmango.com/*","http://*.qumei.com/*","http://*.quwan.com/*","http://*.qxian.com/*","http://*.rayi.cn/*","http://*.redbaby.com.cn/*","http://*.robam.com/*","http://*.salala.com.cn/*","http://*.samsclub.cn/*","http://*.sanfo.com/*","http://*.sapo.com.hk/*","http://*.sasa.com/*","http://*.sasacity.com/*","http://*.sawbuy.com/*","http://*.shanghai-sports.com/*","http://*.shentop.com/*","http://*.shishangqiyi.com/*","http://*.shjdq.com/*","http://*.shnn.com/*","http://*.shopin.net/*","http://*.shoubiao.com.cn/*","http://*.sigo.cn/*","http://mall.sina.com.cn/*","http://*.sinobuy.cn/*","http://*.skcoo.com/*","http://*.skomart.com/*","http://*.snyun.com/*","http://*.sonmai.cn/*","http://*.sport2008.com.cn/*","http://*.strawberrynet.com/*","http://*.suning.com/*","http://*.sz-esun.com/*","http://*.tao3c.com/*","http://item.taobao.com/*","http://*.taoxie.cn/*","http://*.the365.com/*","http://*.thinkshop.cn/*","http://*.tian10.com/*","http://*.tiantian.com/*","http://*.junph.com/*","http://*.tieyou.com/*","http://detail.tmall.com/*","http://*.togj.com/*","http://*.tooogooo.com/*","http://*.toy90.com/*","http://*.toys365.com/*","http://*.tpy100.com/*","http://*.tuniu.com/*","http://*.tztart.com/*","http://*.ugou.cn/*","http://*.uipmall.com/*","http://*.uiyi.cn/*","http://*.ushan.cn/*","http://*.uushouji.com/*","http://*.uya100.com/*","http://*.vaakav.com/*","http://*.vafox.com/*","http://*.vancl.com/*","http://*.vcotton.com/*","http://*.veedl.com/*","http://*.vegoos.com/*","http://*.venusveil.com/*","http://*.veryok.cn/*","http://*.viccol.com/*","http://*.vipshop.com/*","http://*.vipstore.com/*","http://*.vivian.cn/*","http://*.vjia.com/*","http://*.vnasi.com/*","http://*.voipyeah.com/*","http://*.w1.cn/*","http://*.waipowang.com/*","http://*.wangshanghai.com/*","http://*.wg365.com/*","http://*.winenice.com/*","http://*.wl.cn/*","http://*.womai.com/*","http://*.woye.com/*","http://*.wtaotao.com/*","http://*.wumeiwang.com/*","http://*.x-playboy.com/*","http://*.xiaokang.com/*","http://*.xiaozhuren.com/*","http://*.xinbaigo.com/*","http://*.xindou.com/*","http://*.xing800.com/*","http://*.xinhuabookstore.com/*","http://*.xiu.com/*","http://*.xtpo.cn/*","http://*.xzuan.com/*","http://*.yaja.com.cn/*","http://*.yaofang.cn/*","http://*.yasai.cn/*","http://*.yeecare.com/*","http://buy.yesky.com/*","http://*.yesmytea.com/*","http://*.yesmywine.com/*","http://*.yide.com/*","http://*.yifu.com/*","http://*.yihaodian.com/*","http://*.yintai.com/*","http://*.yinyuehe.net/*","http://*.yjcs.cn/*","http://*.yobrand.com/*","http://*.yoger.com.cn/*","http://*.yoho.cn/*","http://*.yongle.com.cn/*","http://*.yougou.com/*","http://*.youjk.com/*","http://*.yoyo18.com/*","http://*.yumaoclub.com/*","http://*.yyosso.com/*","http://*.zbird.com/*","http://*.zgcbb.com/*","http://*.zm7.cn/*","http://*.zopo.com/*","http://*.ibuying.com/*","http://*.33go.com.cn/*","http://*.xijie.com/*","http://*.nop.cn/*","http://*.asyp.com/*","http://*.sparty.cn/*","http://*.yizhedian.com/*","http://*.lvhezi.com/*","http://*.aishangbaobao.com/*","http://*.sportica.cn/*","http://*.jstsilk.cn/*","http://*.camel.com.cn/*","http://*.cottonpop.net/*","http://*.hyj.com/*","http://*.myxiequ.com/*","http://*.mfplaza.com/*","http://*.do93.com/*","http://*.3guo.cn/*","http://*.yaqifushi.com/*","http://*.trura.com/*","http://*.lbaobao.cn/*","http://*.xiutuan.com/*","http://*.usashopcn.com/*","http://*.ihaveu.com/*","http://*.vipku.com/*","http://*.vipchina.com/*","http://*.fanrry.cn/*","http://*.lesunvip.com/*","http://*.nala.com.cn/*","http://*.miqi.cn/*","http://*.meiribuy.com/*","http://*.pufung.com/*","http://*.xiaoye.com/*","http://*.hmeili.com/*","http://*.oulybuy.com/*","http://*.meifenzi.com/*","http://*.caomeishop.com/*","http://*.meifu360.com/*","http://*.bapashop.com/*","http://*.bulangxiongdi.com/*","http://*.gusubuy.com/*","http://*.opearl.net/*","http://*.ruci.cn/*","http://*.rax.cn/*","http://*.jiuxian.com/*","http://*.maimaicha.com/*","http://*.pinwine.cn/*","http://*.meiweidao.com/*","http://*.okliang.com/*","http://*.365wine.com/*","http://*.jjlg.com.cn/*","http://*.bianlishe.com/*","http://*.epkmall.com/*","http://*.gdcct.com/*","http://*.500ccc.com/*","http://*.me361.com/*","http://*.malatamobile.com/*","http://*.trioo.com/*","http://*.oohdear.com/*","http://*.yaahe.cn/*","http://*.easeeyes.com/*","http://*.dbox.cn/*","http://*.haotehui.com/*","http://*.m6go.com/*","http://*.bianyigo.com/*","http://*.okjee.com/*","http://*.mygeek.cn/*","http://*.tbb.cn/*","http://*.ushare360.com/*","http://*.gqt168.com/*","http://*.konjoy.com/*","http://*.aoliz.com/*","http://*.jianianle.com/*","http://*.akajia.com/*","http://*.miqi.com.cn/*","http://*.lehuimai.com/*","http://*.lifevc.com/*","http://*www.ouku.com/","http://nuomi.com/*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1521544028701,"data":{}},"enabled":false,"position":8,"file_url":"https://greasyfork.org/scripts/14466-%E8%B4%AD%E7%89%A9%E5%85%9A%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/code/%E8%B4%AD%E7%89%A9%E5%85%9A%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7.user.js","uuid":"1741e58d-bd6d-4614-bcc5-833d727e7636","source":""},{"name":"自动京东配送","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["*//search.jd.com/*","*//www.jd.com/pinpai/*","*//list.jd.com/list.html?*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1521545687748,"data":{}},"enabled":true,"position":9,"file_url":"https://greasyfork.org/scripts/18190-%E8%87%AA%E5%8A%A8%E4%BA%AC%E4%B8%9C%E9%85%8D%E9%80%81/code/%E8%87%AA%E5%8A%A8%E4%BA%AC%E4%B8%9C%E9%85%8D%E9%80%81.user.js","uuid":"c0d91cbb-bb59-41b8-85ef-911936b6b356","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgICAgICAg6Ieq5Yqo5Lqs5Lic6YWN6YCBCi8vIEBuYW1lOnpoLUNOICAgICAgICAgIOiHquWKqOS6rOS4nOmFjemAgQovLyBAbmFtZTp6aC1UVyAgICAgICAgICDoh6rli5XkuqzmnbHphY3pgIEKLy8gQGRlc2NyaXB0aW9uICAgICAgICAg5Zyo5Lqs5Lic5rWP6KeI5ZWG5ZOB5pe277yM5Y+v6YCJ5oup6Ieq5Yqo5Li65L2g5Yu+6YCJIFvkuqzkuJzphY3pgIFd44CBW+S7heaYvuekuuaciei0p13jgIFb6ZSA6YeP5o6S5bqPXeOAguaWueS+v+WunueUqO+8gQovLyBAZGVzY3JpcHRpb246emgtQ04gICDlnKjkuqzkuJzmtY/op4jllYblk4Hml7bvvIzlj6/pgInmi6noh6rliqjkuLrkvaDli77pgIkgW+S6rOS4nOmFjemAgV3jgIFb5LuF5pi+56S65pyJ6LSnXeOAgVvplIDph4/mjpLluo9d44CC5pa55L6/5a6e55So77yBCi8vIEBkZXNjcmlwdGlvbjp6aC1UVyAgIOWcqOS6rOadseeAj+imveWVhuWTgeaZgu+8jOWPr+mBuOaTh+iHquWLleeCuuS9oOWLvumBuCBb5Lqs5p2x6YWN6YCBXeOAgVvlg4Xpoa/npLrmnInosqhd44CBW+mKt+mHj+aOkuW6j13jgILmlrnkvr/lr6bnlKjvvIEKCi8vIEBhdXRob3IgICAgICAgICAgICAgIE1vc2hlbAovLyBAbmFtZXNwYWNlICAgICAgICAgICBodHRwczovL2h6eS5wdwovLyBAaG9tZXBhZ2VVUkwgICAgICAgICBodHRwczovL2h6eS5wdy9wLzEzNDkKLy8gQHN1cHBvcnRVUkwgICAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tL2gyeS9saW5rLWZpeAovLyBAaWNvbiAgICAgICAgICAgICAgICBodHRwczovL2h6eS5wdy93cC1jb250ZW50L3VwbG9hZHMvMjAxNS8wNC9pLmpwZWcKLy8gQGxpY2Vuc2UgICAgICAgICAgICAgR1BMLTMuMAoKLy8gQGluY2x1ZGUgICAgICAgICAgICAgKi8vc2VhcmNoLmpkLmNvbS8qCi8vIEBpbmNsdWRlICAgICAgICAgICAgICovL3d3dy5qZC5jb20vcGlucGFpLyoKLy8gQGluY2x1ZGUgICAgICAgICAgICAgKi8vbGlzdC5qZC5jb20vbGlzdC5odG1sPyoKLy8gQGdyYW50ICAgICAgICAgICAgICAgbm9uZQovLyBAcnVuLWF0ICAgICAgICAgICAgICBkb2N1bWVudC1zdGFydAoKLy8gQHZlcnNpb24gICAgICAgICAgICAgMi40LjAKLy8gQG1vZGlmaWVkICAgICAgICAgICAgMDIvMDcvMjAxOAovLyA9PS9Vc2VyU2NyaXB0PT0KCgohIGZ1bmN0aW9uKCkgewoKICAgIC8vIGdldCBHRVQgYXR0cmlidXRlcwogICAgY29uc3QgJF9HRVQgPSAoZnVuY3Rpb24oKXsKICAgICAgICBsZXQgdXJsID0gbG9jYXRpb24uc2VhcmNoOwogICAgICAgIGxldCB1ID0gdXJsLnNwbGl0KCI/IiwgMik7CiAgICAgICAgaWYodHlwZW9mKHVbMV0pID09PSAic3RyaW5nIil7CiAgICAgICAgICAgIHUgPSB1WzFdLnNwbGl0KCImIik7CiAgICAgICAgICAgIGxldCBnZXQgPSB7fTsKICAgICAgICAgICAgZm9yKGxldCBpPTA7IGk8dS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgbGV0IGogPSB1W2ldLnNwbGl0KCI9Iik7CiAgICAgICAgICAgICAgICBnZXRbalswXV0gPSBqWzFdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBnZXQ7CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICAgICAgcmV0dXJuIHt9OwogICAgfSkoKTsKCgogICAgbGV0IGhyZWYgPSBsb2NhdGlvbi5zZWFyY2g7CgoKICAgIC8v5pCc57Si6Ieq6JClCiAgICBpZiAoJF9HRVQua2V5d29yZCAmJgogICAgICAgIGRlY29kZVVSSUNvbXBvbmVudCgkX0dFVC5rZXl3b3JkKS5pbmRleE9mKCfoh6rokKUnKTwwICYmCiAgICAgICAgIXdpbmRvdy5zZXNzaW9uU3RvcmFnZVsnYXV0b19qZF9jaGFuZ2VkX2tleXdvcmQnXSApCiAgICB7CiAgICAgICAgaHJlZiA9IGhyZWYucmVwbGFjZSgkX0dFVC5rZXl3b3JkLCAkX0dFVC5rZXl3b3JkICsgJyDoh6rokKUnICk7CiAgICAgICAgd2luZG93LnNlc3Npb25TdG9yYWdlWydhdXRvX2pkX2NoYW5nZWRfa2V5d29yZCddID0gdHJ1ZTsKICAgIH0KCgogICAgLy8g5pyJ6LSnCiAgICBpZiAoISRfR0VULnN0b2NrKQogICAgICAgIGhyZWYgKz0gIiZzdG9jaz0xIjsKICAgIC8vIOS6rOS4nOmFjemAgQogICAgaWYgKCEkX0dFVC53dHlwZSkKICAgICAgICBocmVmICs9ICImd3R5cGU9MSI7CiAgICAvLyDplIDph4/mjpLluo8KICAgIGlmICghJF9HRVQucHNvcnQpCiAgICAgICAgaHJlZiArPSAiJnBzb3J0PTMiOwogICAgLyrmn5DkupvliIbnsbvpobXpnaIqLwogICAgaWYoISRfR0VULnNvcnQpCiAgICAgICAgaHJlZiArPSAiJnNvcnQ9c29ydF90b3RhbHNhbGVzMTVfZGVzYyI7CgoKICAgIGlmKGxvY2F0aW9uLnNlYXJjaCAhPSBocmVmKQogICAgICAgIGxvY2F0aW9uLnNlYXJjaCA9IGhyZWY7Cgp9KCk7Cg=="},{"name":"Popup Blocker Script","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://*/*","http://*/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":["re.popupblockerscript.com","self","*"]}},"storage":{"ts":1521801129115,"data":{"dprm":"n1521546217523","sdc_data":"s{\"uid\":null,\"pid\":\"a8363e117138a28f49d8e7e2a7de7ea\",\"lastFocusedUrl\":null,\"q\":\"https://www.baidu.com/s?wd=%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%20%E8%8B%B1%E6%96%87&rsv_spt=1&rsv_iqid=0xc120da8600033643&issp=1&f=8&rsv_bp=0&rsv_idx=2&ie=utf-8&tn=baiduhome_pg&rsv_enter=1&rsv_sug3=25&rsv_sug1=23&rsv_sug7=101&rsv_t=f6eeifyefZw3OvDmGDksaL0zAJ7Ygn4%2BTczxjS%2Bt%2Fu1TviW0lBofeGe7FdGYL4s1cHOp\",\"hreferer\":\"\",\"_active\":\"https://www.baidu.com/s?wd=%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%20%E8%8B%B1%E6%96%87&rsv_spt=1&rsv_iqid=0xc120da8600033643&issp=1&f=8&rsv_bp=0&rsv_idx=2&ie=utf-8&tn=baiduhome_pg&rsv_enter=1&rsv_sug3=25&rsv_sug1=23&rsv_sug7=101&rsv_t=f6eeifyefZw3OvDmGDksaL0zAJ7Ygn4%2BTczxjS%2Bt%2Fu1TviW0lBofeGe7FdGYL4s1cHOp\",\"prev\":\"https://www.baidu.com/\"}"}},"enabled":true,"position":10,"file_url":"https://greasyfork.org/scripts/37654-popup-blocker-script/code/Popup%20Blocker%20Script.user.js","uuid":"87e6cb60-e17b-475e-9f19-2591f291a103","source":""},{"name":"iZhihu","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["http://www.zhihu.com/*","https://www.zhihu.com/*"],"merge_includes":true,"use_matches":[],"orig_matches":["http://www.zhihu.com/*","https://www.zhihu.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1521545819979,"data":{}},"enabled":true,"position":10,"file_url":"https://greasyfork.org/scripts/350-izhihu/code/iZhihu.user.js","uuid":"b246c336-df4c-42d1-9250-e58f7ef79603","source":""},{"name":"Endless Google","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["http://www.google.*","https://www.google.*","https://encrypted.google.*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1521546462858,"data":{}},"enabled":true,"position":11,"file_url":"https://openuserjs.org/install/tumpio/Endless_Google.user.js","uuid":"dd2f56e5-e2bb-4185-bab2-47dd3fc73704","source":""},{"name":"百度云插件+APIKey","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["/https?\\:\\/\\/(pan|yun)\\.baidu\\.com.*/"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-end","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1521546738109,"data":{}},"enabled":true,"position":12,"file_url":"https://greasyfork.org/scripts/496-%E7%99%BE%E5%BA%A6%E4%BA%91%E6%8F%92%E4%BB%B6-apikey/code/%E7%99%BE%E5%BA%A6%E4%BA%91%E6%8F%92%E4%BB%B6+APIKey.user.js","uuid":"fdbd7b74-45e9-4656-a491-14ef2d2941f3","source":""},{"name":"DuckDuckGo Extended","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://duckduckgo.com/*","http://mycroftproject.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":["*://duckduckgo.com/post2.html"],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1521546746968,"data":{}},"enabled":true,"position":13,"file_url":"https://openuserjs.org/install/tumpio/DuckDuckGo_Extended.user.js","uuid":"0d5de916-a2e3-495f-acb8-84703e466eb0","source":""},{"name":"Open Tweet Image","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":["https://twitter.com/*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":["https://twitter.com/settings/*"],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":true,"orig_connects":[]}},"storage":{"ts":1521793459493,"data":{}},"enabled":false,"position":14,"file_url":"https://greasyfork.org/scripts/6371-open-tweet-image/code/Open%20Tweet%20Image.user.js","uuid":"1559f2cd-410f-4580-b951-1be62f0442d8","source":""}],"settings":{"script_blacklist_server":[{"severity":"2","rules":["/https?:\\/\\/userscripts\\.org\\/scripts\\/(source|version)/(102614).*\\.user\\.js/"]},{"name":"SaveFrom.net helper","severity":"3","rules":["/https?:\\/\\/sf-addon\\.com\\/.*\\/.*\\.user\\.js/","/https?:\\/\\/.*\\.sf-helper\\.com\\/.*\\.user\\.js/"],"reason":"Shows advertisements"}],"configMode":50}}